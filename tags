!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABS	Macros.h	/^#define ABS(/;"	d
ACos	mxt.h	/^#define ACos(/;"	d
ADDRESS_LOOKUP	SymbolTable.h	/^#define ADDRESS_LOOKUP	/;"	d
ALIGN16_BEG	sse_mathfun.h	/^# define ALIGN16_BEG /;"	d
ALIGN16_BEG	sse_mathfun.h	/^# define ALIGN16_BEG$/;"	d
ALIGN16_END	sse_mathfun.h	/^# define ALIGN16_END /;"	d
ALIGN16_END	sse_mathfun.h	/^# define ALIGN16_END$/;"	d
ALLOCA	ALLOCA.h	/^#			define ALLOCA(/;"	d
ALLOCA	ALLOCA.h	/^#		define ALLOCA(/;"	d
ANY	regex.c	/^#define ANY /;"	d	file:
ANYSKIP	regex.c	/^#define ANYSKIP	/;"	d	file:
APPROCESS_TAG	vars-standalone.c	/^#define APPROCESS_TAG	/;"	d	file:
ASCANF_FUNCTION_BUF	varsedit.h	/^#define ASCANF_FUNCTION_BUF	/;"	d
ASCANF_MAX_ARGS	varsedit.h	/^#define ASCANF_MAX_ARGS	/;"	d
ASCIIB	regex.c	/^#define ASCIIB	/;"	d	file:
ASSERTS	Macros.h	/^#define ASSERTS(/;"	d
ASin	mxt.h	/^#define ASin(/;"	d
ATan	mxt.h	/^#define ATan(/;"	d
ATan2	mxt.h	/^#define ATan2(/;"	d
A_FUN	defun.h	/^#	define A_FUN(/;"	d
Add_VariableSymbolValue	varsV.c	/^SymbolTable *Add_VariableSymbolValue( char *name, pointer ptr, int size, ObjectTypes obtype, int log,\\$/;"	f
AddrSynonym	SymbolTable.h	/^	#define AddrSynonym /;"	d
AddrTable	SymbolTable.h	/^	#define AddrTable /;"	d
Address_Known	SymbolTable.h	/^	#define Address_Known	/;"	d
AllocLineBuffer	varsP.c	/^int AllocLineBuffer( ptr, linelength, numlines)$/;"	f
Allow_Fractions	mxt.c	/^int Allow_Fractions= 1;$/;"	v
Appendlog	vars-standalone.h	/^#define Appendlog(/;"	d
Arg	mxt.h	/^#define Arg(/;"	d
BIGFMT	cpu.h	/^#define BIGFMT	/;"	d
BITBLK	regex.c	/^#define BITBLK	/;"	d	file:
BITIND	regex.c	/^#define BITIND	/;"	d	file:
BITWISE_AND	Macros.h	/^#define BITWISE_AND(/;"	d
BITWISE_NOT	Macros.h	/^#define BITWISE_NOT(/;"	d
BITWISE_OR	Macros.h	/^#define BITWISE_OR(/;"	d
BITWISE_XOR	Macros.h	/^#define BITWISE_XOR(/;"	d
BLKIND	regex.c	/^#define BLKIND	/;"	d	file:
BOL	regex.c	/^#define BOL /;"	d	file:
BOT	regex.c	/^#define BOT /;"	d	file:
BOW	regex.c	/^#define BOW	/;"	d	file:
Bool_par	varsedit.h	/^#define Bool_par(/;"	d
Bool_par_default	varsP.c	/^int Bool_par_default( s, def)$/;"	f
C0	sincos.c	/^#define	C0	/;"	d	file:
C1	sincos.c	/^#define	C1	/;"	d	file:
C2	sincos.c	/^#define	C2	/;"	d	file:
C3	sincos.c	/^#define	C3	/;"	d	file:
C4	sincos.c	/^#define	C4	/;"	d	file:
C5	sincos.c	/^#define	C5	/;"	d	file:
CCL	regex.c	/^#define CCL /;"	d	file:
CCLSKIP	regex.c	/^#define CCLSKIP /;"	d	file:
CHANGED_FIELD	varsintr.h	/^#define CHANGED_FIELD(/;"	d
CHANGED_FIELD_INDEX	varsintr.h	/^#define CHANGED_FIELD_INDEX(/;"	d
CHANGED_FIELD_OFFSET	varsintr.h	/^#define CHANGED_FIELD_OFFSET	/;"	d
CHAR	regex.c	/^typedef \/*unsigned*\/ char CHAR;$/;"	t	file:
CHAR_PVAR	varsedit.h	/^	CHAR_PVAR, SHORT_PVAR, INT_PVAR, LONG_PVAR, FLOAT_PVAR, DOUBLE_PVAR, FUNCTION_PVAR,$/;"	e	enum:TypeOfVariable
CHAR_VAR	varsedit.h	/^	CHAR_VAR=	1, UCHAR_VAR, SHORT_VAR, USHORT_VAR, INT_VAR,$/;"	e	enum:TypeOfVariable
CHKLCA	ALLOCA.h	/^#		define CHKLCA(/;"	d
CHKLCA	ALLOCA.h	/^#	define CHKLCA(/;"	d
CHKLCA_MAX	ALLOCA.h	/^#	define CHKLCA_MAX	/;"	d
CHR	regex.c	/^#define CHR /;"	d	file:
CHRBIT	regex.c	/^#define CHRBIT	/;"	d	file:
CHRSKIP	regex.c	/^#define CHRSKIP	/;"	d	file:
CLIP	Macros.h	/^#	define CLIP(/;"	d
CLIP_EXPR	Macros.h	/^#define CLIP_EXPR(/;"	d
CLO	regex.c	/^#define CLO /;"	d	file:
CLRBIT	Macros.h	/^#define CLRBIT(/;"	d
COMMAND_VAR	varsedit.h	/^	COMMAND_VAR, VARIABLE_VAR,$/;"	e	enum:TypeOfVariable
COPY_MM_TO_XMM	sse_mathfun.h	/^#define COPY_MM_TO_XMM(/;"	d
COPY_XMM_TO_MM	sse_mathfun.h	/^#define COPY_XMM_TO_MM(/;"	d
COS	mxt.c	/^double COS(x)						\/* linear approx. of a cosine	*\/$/;"	f
CVP	varsV.c	/^#define CVP	/;"	d	file:
CX_AllocRemember	vars-standalone.c	/^pointer CX_AllocRemember( struct Remember **rmkey, unsigned long n, unsigned long dum)$/;"	f
CX_DEFER_WRITABLE	CX_writable_strings.h	/^#	define CX_DEFER_WRITABLE(/;"	d
CX_END_WRITABLE	CX_writable_strings.h	/^#	define CX_END_WRITABLE(/;"	d
CX_Exit	vars-standalone.c	/^static int CX_Exit(int x, int flag)$/;"	f	file:
CX_FreeRemember	vars-standalone.c	/^unsigned long CX_FreeRemember( struct Remember **rmkey, long de_allocmem)$/;"	f
CX_MAKE_WRITABLE	CX_writable_strings.h	/^#	define CX_MAKE_WRITABLE(/;"	d
CX_PrintRememberList	vars-standalone.c	/^void CX_PrintRememberList(FILE *fp)$/;"	f
CX_Time	vars-standalone.c	/^char *CX_Time()$/;"	f
CX_Trace_StackBase	vars-standalone.c	/^trace_stack_item *CX_Trace_StackBase= NULL, *CX_Trace_StackTop= NULL;$/;"	v
CX_Trace_StackTop	vars-standalone.c	/^trace_stack_item *CX_Trace_StackBase= NULL, *CX_Trace_StackTop= NULL;$/;"	v
CX_VA_DCL	varsedit.h	/^#		define CX_VA_DCL	/;"	d
CX_VA_DCL	varsedit.h	/^#	define CX_VA_DCL	/;"	d
CX_callocItems	vars-standalone.c	/^unsigned long CX_calloced= 0, CX_callocItems= 0;$/;"	v
CX_callocList	vars-standalone.c	/^RememberList *CX_callocList= NULL, *CX_callocListTail= NULL;$/;"	v
CX_callocListTail	vars-standalone.c	/^RememberList *CX_callocList= NULL, *CX_callocListTail= NULL;$/;"	v
CX_callocSerial	vars-standalone.c	/^static long CX_callocSerial= 0L;$/;"	v	file:
CX_calloced	vars-standalone.c	/^unsigned long CX_calloced= 0, CX_callocItems= 0;$/;"	v
CX_dlopen	vars-standalone.c	/^void *CX_dlopen( const char *libname, int flags )$/;"	f
CX_env	vars-standalone.c	/^static char CX_env[256];$/;"	v	file:
CX_exit	vars-standalone.c	/^int CX_exit(int x)$/;"	f
CX_key	vars-standalone.c	/^struct Remember *CX_key= NULL;$/;"	v	typeref:struct:Remember
CX_writable_strings	vars-standalone.c	/^int CX_writable_strings= 0;$/;"	v
CheckEndianness	vars-standalone.c	/^int CheckEndianness()$/;"	f
CheckExclMask	Macros.h	/^#	define	CheckExclMask(/;"	d
CheckMask	Macros.h	/^#	define	CheckMask(/;"	d
Check_Recurse	varsV.c	/^static int Check_Recurse( char *name )$/;"	f	file:
Clear_Parbuffer	varsP.c	/^Clear_Parbuffer()$/;"	f
Close_File	vars-standalone.c	/^int Close_File( FILE *fp, int final)$/;"	f
Close_Pager	varsV.c	/^int Close_Pager( FILE *output)$/;"	f
Close_Pipe	vars-standalone.c	/^int Close_Pipe( FILE *fp)$/;"	f
Close_Stream	varsV.c	/^int Close_Stream( int which, FILE *output)$/;"	f
CopySign	sincos.c	/^double CopySign( double x, double y )$/;"	f	file:
Cos	mxt.h	/^#define Cos(/;"	d
CosC	sincos.c	/^double CosC( double x )$/;"	f	file:
CumSum	sse_mathfun.h	/^static inline double CumSum( double *xa, int n )$/;"	f
CumSumSq	sse_mathfun.h	/^static inline double CumSumSq( double *xa, int n )$/;"	f
CumSumSumSq	sse_mathfun.h	/^static inline double CumSumSumSq( double *xa, int n, double *sumSQ )$/;"	f
D2STR_BUFS	mxt.c	/^#define D2STR_BUFS	/;"	d	file:
DEFMETHOD	SymbolTable.h	/^typedef DEFMETHOD( Symbol_PrintValue_method, (FILE *fp, struct _Variable *var, int extra), short );$/;"	t
DEFMETHOD	defun.h	/^#	define DEFMETHOD(/;"	d
DEFMETHOD	vars-standalone.h	/^#	define DEFMETHOD(/;"	d
DEFMETHOD	varsedit.h	/^typedef DEFMETHOD(VariableChange_method,(struct Variable_t*, long , long, long),int);$/;"	t
DEFUN	defun.h	/^#	define DEFUN(/;"	d
DEFUN	vars-standalone.h	/^#	define DEFUN(/;"	d
DEG	mxt.h	/^#define DEG /;"	d
DIM	Macros.h	/^#define DIM(/;"	d
DOUBLES	mxt.h	/^#define DOUBLES /;"	d
DOUBLE_PVAR	varsedit.h	/^	CHAR_PVAR, SHORT_PVAR, INT_PVAR, LONG_PVAR, FLOAT_PVAR, DOUBLE_PVAR, FUNCTION_PVAR,$/;"	e	enum:TypeOfVariable
DOUBLE_VAR	varsedit.h	/^	UINT_VAR, LONG_VAR, ULONG_VAR, HEX_VAR, FLOAT_VAR, DOUBLE_VAR,$/;"	e	enum:TypeOfVariable
Delay_Flush	vars-standalone.h	/^static int Delay_Flush;$/;"	v
DeltaT	mxt.h	/^	double DeltaT, *state;$/;"	m	struct:leaky_int_par
DescribedVariable	varsedit.h	/^typedef struct DescribedVariable{$/;"	s
DescribedVariable	varsedit.h	/^} DescribedVariable;$/;"	t	typeref:struct:DescribedVariable
DescribedVariable2	varsedit.h	/^typedef struct DescribedVariable2{$/;"	s
DescribedVariable2	varsedit.h	/^} DescribedVariable2;$/;"	t	typeref:struct:DescribedVariable2
Dir	vars-standalone.c	/^char Dir[256]= ".\/.env", *EnvDir= Dir;$/;"	v
Disposable	vars-standalone.h	/^} Disposable;				$/;"	t	typeref:struct:disposable
DisposableVolume	vars-standalone.c	/^long DisposableVolume= 0L;$/;"	v
Dispose_Addresses	SymbolTable.h	/^	#define Dispose_Addresses	/;"	d
Dispose_All_Disposables	vars-standalone.c	/^int Dispose_All_Disposables()$/;"	f
Dispose_Disposable	vars-standalone.c	/^pointer Dispose_Disposable( pointer x)$/;"	f
Dispose_Trace_Stack	vars-standalone.c	/^int Dispose_Trace_Stack()$/;"	f
Double_par	varsedit.h	/^#define Double_par(/;"	d
Double_par_default	varsP.c	/^double Double_par_default( s, def)$/;"	f
Doubles_par	varsedit.h	/^#define Doubles_par(/;"	d
Doubles_par_default	varsP.c	/^int Doubles_par_default( s, a, n, strict, def)		$/;"	f
E	mathdef.h	/^#	undef E$/;"	d
EALIENERRNO	cxerrno.h	/^#define	EALIENERRNO	/;"	d
EALLOCMEMORY	cxerrno.h	/^#define	EALLOCMEMORY	/;"	d
EALLOCSCRATCH	cxerrno.h	/^#define	EALLOCSCRATCH	/;"	d
EDIVZERO	cxerrno.h	/^#define	EDIVZERO	/;"	d
EILLSINCTYPE	cxerrno.h	/^#define	EILLSINCTYPE	/;"	d
EINDEXRANGE	cxerrno.h	/^#define	EINDEXRANGE	/;"	d
EINITTMPRAS	cxerrno.h	/^#define	EINITTMPRAS	/;"	d
ELFREEALIEN	cxerrno.h	/^#define	ELFREEALIEN	/;"	d
ELFREETWICE	cxerrno.h	/^#define	ELFREETWICE	/;"	d
END	regex.c	/^#define END /;"	d	file:
ENOSUCHPAR	cxerrno.h	/^#define	ENOSUCHPAR	/;"	d
ENOSUCHVAR	cxerrno.h	/^#define	ENOSUCHVAR	/;"	d
ENOXTERM	cxerrno.h	/^#define	ENOXTERM	/;"	d
EOL	regex.c	/^#define EOL /;"	d	file:
EOPENLIBRARY	cxerrno.h	/^#define	EOPENLIBRARY	/;"	d
EOPENSCREEN	cxerrno.h	/^#define	EOPENSCREEN	/;"	d
EOPENWINDOW	cxerrno.h	/^#define	EOPENWINDOW	/;"	d
EOT	regex.c	/^#define EOT /;"	d	file:
EOW	regex.c	/^#define EOW	/;"	d	file:
ESINCISNULL	cxerrno.h	/^#define	ESINCISNULL	/;"	d
EUNAVAILABLE	cxerrno.h	/^#define	EUNAVAILABLE	/;"	d
EVARILLID	cxerrno.h	/^#define	EVARILLID	/;"	d
EVARILLSYNTAX	cxerrno.h	/^#define	EVARILLSYNTAX	/;"	d
EVARILLTYPE	cxerrno.h	/^#define	EVARILLTYPE	/;"	d
EVARNOCOMMAND	cxerrno.h	/^#define	EVARNOCOMMAND	/;"	d
EVARNONAME	cxerrno.h	/^#define	EVARNONAME	/;"	d
EVARNULL	cxerrno.h	/^#define	EVARNULL	/;"	d
EVARRDONLY	cxerrno.h	/^#define	EVARRDONLY	/;"	d
EmptySimpleAngleStats	mxt.c	/^SimpleAngleStats EmptySimpleAngleStats= {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};$/;"	v
EmptySimpleStats	mxt.c	/^SimpleStats EmptySimpleStats= {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};$/;"	v
EndianType	vars-standalone.c	/^int EndianType;$/;"	v
Enter_Disposable	vars-standalone.c	/^int Enter_Disposable( pointer x, unsigned long size)$/;"	f
Entier	mxt.c	/^double Entier(double x)$/;"	f
EnvDir	vars-standalone.c	/^char Dir[256]= ".\/.env", *EnvDir= Dir;$/;"	v
Euclidian_Dist	mxt.h	/^#define Euclidian_Dist(/;"	d
Euclidian_SQDist	mxt.h	/^#define Euclidian_SQDist(/;"	d
ExitCodeChain	vars-standalone.c	/^static Exit_Code *ExitCodeChain= NULL;$/;"	v	file:
ExitCode_key	vars-standalone.c	/^static struct Remember *ExitCode_key= NULL;$/;"	v	typeref:struct:Remember	file:
Exit_Code	vars-standalone.c	/^} Exit_Code;$/;"	t	typeref:struct:exit_code	file:
FABS	Macros.h	/^#define FABS(/;"	d
FALSE	vars-standalone.h	/^#define FALSE	/;"	d
FFPsincos	mxt.c	/^double FFPsincos( co, arg)$/;"	f
FIXFMT	cpu.h	/^#define FIXFMT	/;"	d
FLOAT_PVAR	varsedit.h	/^	CHAR_PVAR, SHORT_PVAR, INT_PVAR, LONG_PVAR, FLOAT_PVAR, DOUBLE_PVAR, FUNCTION_PVAR,$/;"	e	enum:TypeOfVariable
FLOAT_VAR	varsedit.h	/^	UINT_VAR, LONG_VAR, ULONG_VAR, HEX_VAR, FLOAT_VAR, DOUBLE_VAR,$/;"	e	enum:TypeOfVariable
FLOFMT	cpu.h	/^#define FLOFMT	/;"	d
FREE	vars-standalone.h	/^#	define FREE(/;"	d
FUNCTION	defun.h	/^#define FUNCTION(/;"	d
FUNCTION_PVAR	varsedit.h	/^	CHAR_PVAR, SHORT_PVAR, INT_PVAR, LONG_PVAR, FLOAT_PVAR, DOUBLE_PVAR, FUNCTION_PVAR,$/;"	e	enum:TypeOfVariable
FUNCTION_SYMBOL	SymbolTable.h	/^#define FUNCTION_SYMBOL	/;"	d
FUNCTION_SYMBOL_ENTRY	SymbolTable.h	/^#define FUNCTION_SYMBOL_ENTRY(/;"	d
FUNCTION_SYMBOL_ENTRY_DESCR	SymbolTable.h	/^#define FUNCTION_SYMBOL_ENTRY_DESCR(/;"	d
FUNCTIONs_SYMBOL_ENTRY	SymbolTable.h	/^#define FUNCTIONs_SYMBOL_ENTRY(/;"	d
FUNCTIONs_SYMBOL_ENTRY_DESCR	SymbolTable.h	/^#define FUNCTIONs_SYMBOL_ENTRY_DESCR(/;"	d
False	Macros.h	/^#	define False /;"	d
Find_Disposable	vars-standalone.c	/^Disposable *Find_Disposable( pointer x)$/;"	f
Find_Symbol	vars-standalone.c	/^#	define Find_Symbol(/;"	d	file:
Finite	sincos.c	/^int Finite( double x )$/;"	f	file:
Flush_File	vars-standalone.h	/^#define Flush_File(/;"	d
Free_Parbuffer	varsP.c	/^int Free_Parbuffer()$/;"	f
GCA	ALLOCA.h	/^#			define GCA(/;"	d
GCA	ALLOCA.h	/^#		define GCA(/;"	d
GRA	mxt.h	/^#define GRA /;"	d
GetEnv	vars-standalone.c	/^char *GetEnv( char *n)$/;"	f
GetEnvDir	vars-standalone.c	/^int GetEnvDir()$/;"	f
Get_SymbolValue	varsV.c	/^Variable_t *Get_SymbolValue(pointer x, int tag)$/;"	f
Gonio	mxt.h	/^#define Gonio(/;"	d
Gonio_Base	mxt.c	/^double Gonio_Base( base)$/;"	f
Gonio_Base	mxt.h	/^	double Gonio_Base;$/;"	m	struct:simpleanglestats
Gonio_Base_Value	mxt.c	/^static double Gonio_Base_Value= 360.0, Gonio_Base_Value_2= 180.0, Gonio_Base_Value_4= 90.0;$/;"	v	file:
Gonio_Base_Value_2	mxt.c	/^static double Gonio_Base_Value= 360.0, Gonio_Base_Value_2= 180.0, Gonio_Base_Value_4= 90.0;$/;"	v	file:
Gonio_Base_Value_4	mxt.c	/^static double Gonio_Base_Value= 360.0, Gonio_Base_Value_2= 180.0, Gonio_Base_Value_4= 90.0;$/;"	v	file:
HAS_alloca	ALLOCA.h	/^#define HAS_alloca$/;"	d
HEX_VAR	varsedit.h	/^	UINT_VAR, LONG_VAR, ULONG_VAR, HEX_VAR, FLOAT_VAR, DOUBLE_VAR,$/;"	e	enum:TypeOfVariable
HP_APOLLO	cpu.h	/^#define HP_APOLLO$/;"	d
I3Ed	NaN.h	/^#define I3Ed(/;"	d
I3Ed	mxt.h	/^#define I3Ed(/;"	d
I3Edf	NaN.h	/^#define I3Edf(/;"	d
I3Edf	mxt.h	/^#define I3Edf(/;"	d
IDENTIFY	Macros.h	/^#	define IDENTIFY(/;"	d
IDENTIFY	vars-standalone.h	/^#	define IDENTIFY(/;"	d
IEEEfp	NaN.h	/^typedef union IEEEfp {$/;"	u
IEEEfp	NaN.h	/^} IEEEfp;$/;"	t	typeref:union:IEEEfp
IEEEfp	mxt.h	/^typedef union IEEEfp {$/;"	u
IEEEfp	mxt.h	/^} IEEEfp;$/;"	t	typeref:union:IEEEfp
IEEEsfp	NaN.h	/^typedef union IEEEsfp {$/;"	u
IEEEsfp	NaN.h	/^} IEEEsfp;$/;"	t	typeref:union:IEEEsfp
IEEEsfp	mxt.h	/^typedef union IEEEsfp {$/;"	u
IEEEsfp	mxt.h	/^} IEEEsfp;$/;"	t	typeref:union:IEEEsfp
INF	NaN.h	/^#	define INF(/;"	d
INF	mxt.h	/^#define INF(/;"	d
INTS	mxt.h	/^#define INTS /;"	d
INTSIZE	cpu.h	/^#define INTSIZE	/;"	d
INT_PVAR	varsedit.h	/^	CHAR_PVAR, SHORT_PVAR, INT_PVAR, LONG_PVAR, FLOAT_PVAR, DOUBLE_PVAR, FUNCTION_PVAR,$/;"	e	enum:TypeOfVariable
INT_VAR	varsedit.h	/^	CHAR_VAR=	1, UCHAR_VAR, SHORT_VAR, USHORT_VAR, INT_VAR,$/;"	e	enum:TypeOfVariable
IO	varsV.c	/^static int IO( Variable_t *v, long N, long i, long C)$/;"	f	file:
Index	SymbolTable.h	/^	long Index, item;$/;"	m	struct:SymbolTable
Index	SymbolTable.h	/^	unsigned Index, item;$/;"	m	struct:syno
Index	varsedit.h	/^	int Index, subIndex;$/;"	m	struct:variableselection
Inf	NaN.h	/^#define Inf(/;"	d
Inf	mxt.h	/^#define Inf(/;"	d
Init_Leaky_Int_Par	mxt.c	/^Leaky_Int_Par *Init_Leaky_Int_Par( lip)$/;"	f
Init_Parbuffer	varsP.c	/^int Init_Parbuffer()$/;"	f
Init_Trace_Stack	vars-standalone.c	/^int Init_Trace_Stack(int n)$/;"	f
Int_par	varsedit.h	/^#define Int_par(/;"	d
Int_par_default	varsP.c	/^int Int_par_default( s, def) 			\/* idem for s= x, x an int *\/$/;"	f
Ints_par	varsedit.h	/^#define Ints_par(/;"	d
Ints_par_default	varsP.c	/^int Ints_par_default( s, a, n, strict, def)		$/;"	f
InvGonio	mxt.h	/^#define InvGonio(/;"	d
ItemSeparator	varsV.c	/^char ItemSeparator[32]= " \\\\\\n\\t";$/;"	v
ItemSize	vars-standalone.h	/^	int ItemSize, Items;$/;"	m	struct:RootPointer
Items	vars-standalone.h	/^	int ItemSize, Items;$/;"	m	struct:RootPointer
LABELSIZE	SymbolTable.h	/^#define LABELSIZE /;"	d
LCALLOC	vars-standalone.h	/^#	define LCALLOC /;"	d
LEFT_BRACE	varsintr.h	/^#define LEFT_BRACE	/;"	d
LFREED	vars-standalone.h	/^#	define LFREED /;"	d
LOGIC_AND	Macros.h	/^#define LOGIC_AND(/;"	d
LOGIC_OR	Macros.h	/^#define LOGIC_OR(/;"	d
LOGIC_XOR	Macros.h	/^#define LOGIC_XOR(/;"	d
LOGIG_NOT	Macros.h	/^#define LOGIG_NOT(/;"	d
LONGS	mxt.h	/^#define LONGS /;"	d
LONG_PVAR	varsedit.h	/^	CHAR_PVAR, SHORT_PVAR, INT_PVAR, LONG_PVAR, FLOAT_PVAR, DOUBLE_PVAR, FUNCTION_PVAR,$/;"	e	enum:TypeOfVariable
LONG_VAR	varsedit.h	/^	UINT_VAR, LONG_VAR, ULONG_VAR, HEX_VAR, FLOAT_VAR, DOUBLE_VAR,$/;"	e	enum:TypeOfVariable
LOOPDN	Macros.h	/^#define LOOPDN(/;"	d
Last_ErrorVariable	varsV.c	/^	*Last_ErrorVariable= NULL;$/;"	v
Last_ParsedIVVariable	varsV.c	/^	*Last_ParsedIVariable= NULL, *Last_ParsedIVVariable= NULL,$/;"	v
Last_ParsedIVariable	varsV.c	/^	*Last_ParsedIVariable= NULL, *Last_ParsedIVVariable= NULL,$/;"	v
Last_ParsedVVariable	varsV.c	/^	*Last_ParsedVariable= NULL, *Last_ParsedVVariable= NULL,$/;"	v
Last_ParsedVariable	varsV.c	/^	*Last_ParsedVariable= NULL, *Last_ParsedVVariable= NULL,$/;"	v
Last_ReferenceVariable	varsV.c	/^Variable_t *Last_ReferenceVariable= NULL,$/;"	v
LaundryBasket	vars-standalone.c	/^Disposable *LaundryBasket= NULL;$/;"	v
Leaky_Int_Par	mxt.h	/^} Leaky_Int_Par;$/;"	t	typeref:struct:leaky_int_par
Leaky_Int_Response	mxt.c	/^double Leaky_Int_Response( Leaky_Int_Par *lip, double *state, double input, double gain)$/;"	f
Lfree_Alien	vars-standalone.c	/^char Lfree_Alien= 0;$/;"	v
List_Disposables	vars-standalone.c	/^int List_Disposables( FILE *fp)$/;"	f
MAX	Macros.h	/^#define MAX(/;"	d
MAXCHR	regex.c	/^#define MAXCHR	/;"	d	file:
MAXDFA	regex.c	/^#define MAXDFA /;"	d	file:
MAXDOUBLE	NaN.h	/^#	undef MAXDOUBLE$/;"	d
MAXDOUBLE	mxt.c	/^#undef MAXDOUBLE$/;"	d	file:
MAXDOUBLE	mxt.h	/^#	undef MAXDOUBLE$/;"	d
MAXINT	Macros.h	/^#define MAXINT	/;"	d
MAXLONG	Macros.h	/^#define MAXLONG	/;"	d
MAXSHORT	Macros.h	/^#define MAXSHORT	/;"	d
MAXTAG	regex.c	/^#define MAXTAG /;"	d	file:
MAXUINT	Macros.h	/^#define MAXUINT	/;"	d
MAXULONG	Macros.h	/^#define MAXULONG	/;"	d
MAXUSHORT	Macros.h	/^#define MAXUSHORT	/;"	d
MAX_VARTYPE	varsedit.h	/^#define MAX_VARTYPE	/;"	d
MAX_VAR_LISTS	varsV.c	/^#define MAX_VAR_LISTS	/;"	d	file:
MAXp	Macros.h	/^#define MAXp(/;"	d
METHODTYPE	defun.h	/^#	define METHODTYPE(/;"	d
MIN	Macros.h	/^#define MIN(/;"	d
MINp	Macros.h	/^#define MINp(/;"	d
MOD	Macros.h	/^#define MOD(/;"	d
MXT_SOURCE	mxt.c	/^#define MXT_SOURCE$/;"	d	file:
M_1_PI	mathdef.h	/^#	undef M_1_PI$/;"	d
M_1_PI	mathdef.h	/^#define M_1_PI	/;"	d
M_2PI	mathdef.h	/^#define M_2PI	/;"	d
M_2_PI	mathdef.h	/^#	undef M_2_PI$/;"	d
M_2_PI	mathdef.h	/^#define M_2_PI	/;"	d
M_2_SQRTPI	mathdef.h	/^#	undef M_2_SQRTPI$/;"	d
M_2_SQRTPI	mathdef.h	/^#define M_2_SQRTPI	/;"	d
M_E	mathdef.h	/^#	define M_E	/;"	d
M_E	mathdef.h	/^#	define M_E /;"	d
M_LN10	mathdef.h	/^#	define M_LN10	/;"	d
M_LN2	mathdef.h	/^#	define M_LN2	/;"	d
M_LOG10E	mathdef.h	/^#	define M_LOG10E	/;"	d
M_LOG2E	mathdef.h	/^#	define M_LOG2E	/;"	d
M_PI	mathdef.h	/^#	undef M_PI$/;"	d
M_PI	mathdef.h	/^#define M_PI	/;"	d
M_PI_2	mathdef.h	/^#	undef M_PI_2$/;"	d
M_PI_2	mathdef.h	/^#define M_PI_2	/;"	d
M_PI_4	mathdef.h	/^#	undef M_PI_4$/;"	d
M_PI_4	mathdef.h	/^#define M_PI_4	/;"	d
M_PI_8	mathdef.h	/^#define M_PI_8	/;"	d
M_SQRT1_2	mathdef.h	/^#	define M_SQRT1_2	/;"	d
M_SQRT2	mathdef.h	/^#	define M_SQRT2	/;"	d
MaxItemSize	vars-standalone.h	/^	int MaxItemSize, MaxItems;$/;"	m	struct:RootPointer
MaxItems	vars-standalone.h	/^	int MaxItemSize, MaxItems;$/;"	m	struct:RootPointer
MaxObjectType	vars-standalone.h	/^	MaxObjectType$/;"	e	enum:objecttypes
MaxParLines	varsedit.h	/^#define MaxParLines /;"	d
Max_Trace_StackDepth	vars-standalone.c	/^int Max_Trace_StackDepth= 0;$/;"	v
Memory	vars-standalone.h	/^	pointer Memory, UserMemory;$/;"	m	struct:Remember
MinMax	mxt.h	/^#define MinMax(/;"	d
MinMax_SS_threshold	mxt.h	/^#define MinMax_SS_threshold(/;"	d
N	varsedit.h	/^	unsigned short N, N_copy;$/;"	m	struct:var_changed_field
NAN_VAL	NaN.h	/^#define NAN_VAL	/;"	d
NAN_VAL	mxt.h	/^#define NAN_VAL	/;"	d
NCL	regex.c	/^#define NCL /;"	d	file:
NEEDS_SINCOS	cxtrigo.h	/^#	define NEEDS_SINCOS	/;"	d
NEG_INF	NaN.h	/^#define NEG_INF	/;"	d
NEG_INF	mxt.h	/^#define NEG_INF	/;"	d
NOP	regex.c	/^#define NOP /;"	d	file:
NOT_EOF	varsedit.h	/^typedef enum ascanf_Function_type { NOT_EOF , NOT_EOF_OR_RETURN } ascanf_Function_type;$/;"	e	enum:ascanf_Function_type
NOT_EOF_OR_RETURN	varsedit.h	/^typedef enum ascanf_Function_type { NOT_EOF , NOT_EOF_OR_RETURN } ascanf_Function_type;$/;"	e	enum:ascanf_Function_type
NULL	Macros.h	/^#		undef NULL$/;"	d
NULL	Macros.h	/^#	define NULL /;"	d
N_copy	varsedit.h	/^	unsigned short N, N_copy;$/;"	m	struct:var_changed_field
NaN	NaN.h	/^#	define NaN(/;"	d
NaN	NaN.h	/^#undef NaN$/;"	d
NaN	mxt.h	/^#define NaN(/;"	d
NaN	mxt.h	/^#undef NaN$/;"	d
NaNorInf	NaN.h	/^#	define NaNorInf(/;"	d
NaNorInf	mxt.h	/^#define NaNorInf(/;"	d
NextRemember	vars-standalone.h	/^	struct Remember *NextRemember;$/;"	m	struct:Remember	typeref:struct:Remember::Remember
Normalised_Leaky_Int_Response	mxt.c	/^double Normalised_Leaky_Int_Response( Leaky_Int_Par *lip, double *state, double input)$/;"	f
OKP	regex.c	/^#define OKP /;"	d	file:
OPERATORS	varsedit.h	/^#define OPERATORS	/;"	d
ObjectTypeNames	vars-standalone.c	/^char *ObjectTypeNames[MaxObjectType]= {$/;"	v
ObjectTypeOfVar	varsV.c	/^ObjectTypes ObjectTypeOfVar[MAX_VARTYPE+1]= {$/;"	v
ObjectTypes	vars-standalone.h	/^} ObjectTypes;$/;"	t	typeref:enum:objecttypes
Open_File	vars-standalone.c	/^FILE *Open_File( char *name, char *mode)$/;"	f
Open_Pager	varsV.c	/^FILE *Open_Pager( FILE *alternative)$/;"	f
Open_Pipe_From	vars-standalone.c	/^FILE *Open_Pipe_From( char *command, FILE *alternative)$/;"	f
Open_Pipe_To	vars-standalone.c	/^FILE *Open_Pipe_To( char *command, FILE *alternative)$/;"	f
Open_Stream	varsV.c	/^FILE *Open_Stream( int which, FILE *alternative)$/;"	f
PARSE_OPERATOR_BUFFER	varsV.c	/^#define PARSE_OPERATOR_BUFFER /;"	d	file:
PI	mxt.c	/^#define PI /;"	d	file:
PI	mxt.h	/^#	define PI /;"	d
PI	sincos.c	/^#define	PI	/;"	d	file:
PI2	sincos.c	/^#define	PI2	/;"	d	file:
PI3o4	sincos.c	/^#define	PI3o4	/;"	d	file:
PIPE_depth	varsV.c	/^static int which_PIPE, PIPE_nr, PIPE_depth;$/;"	v	file:
PIPE_file	varsV.c	/^static FILE *PIPE_file= NULL, **PIPE_fileptr= NULL;$/;"	v	file:
PIPE_fileptr	varsV.c	/^static FILE *PIPE_file= NULL, **PIPE_fileptr= NULL;$/;"	v	file:
PIPE_handler	varsV.c	/^void PIPE_handler(sig)$/;"	f
PIPE_nr	varsV.c	/^static int which_PIPE, PIPE_nr, PIPE_depth;$/;"	v	file:
PIPE_var	varsV.c	/^static Variable_t *PIPE_var= NULL;$/;"	v	file:
PI_180	mxt.c	/^#define PI_180	/;"	d	file:
PIo2	sincos.c	/^#define	PIo2	/;"	d	file:
PIo4	sincos.c	/^#define	PIo4	/;"	d	file:
POP_STACK	cpu.h	/^#define POP_STACK(/;"	d
POP_TRACE	vars-standalone.h	/^#	define POP_TRACE(/;"	d
POP_TRACE	varsintr.h	/^#	define POP_TRACE(/;"	d
POS_INF	NaN.h	/^#define POS_INF	/;"	d
POS_INF	mxt.h	/^#define POS_INF	/;"	d
PPROCESS_TAG	vars-standalone.c	/^#define PPROCESS_TAG	/;"	d	file:
PROCEDURE	defun.h	/^#define PROCEDURE(/;"	d
PROTOTYPES	cpu.h	/^#		define PROTOTYPES$/;"	d
PROTOTYPES	cpu.h	/^#	define PROTOTYPES$/;"	d
PROTOTYPES	defun.h	/^#		define PROTOTYPES$/;"	d
PUSH_TRACE	vars-standalone.h	/^#	define PUSH_TRACE(/;"	d
PUSH_TRACE	varsintr.h	/^#	define PUSH_TRACE(/;"	d
P_TO_VAR_SYMBOL_ENTRY	SymbolTable.h	/^#define P_TO_VAR_SYMBOL_ENTRY(/;"	d
P_TO_VAR_SYMBOL_ENTRY_DESCR	SymbolTable.h	/^#define P_TO_VAR_SYMBOL_ENTRY_DESCR(/;"	d
P_TO_VARs_SYMBOL_ENTRY	SymbolTable.h	/^#define P_TO_VARs_SYMBOL_ENTRY(/;"	d
P_TO_VARs_SYMBOL_ENTRY_DESCR	SymbolTable.h	/^#define P_TO_VARs_SYMBOL_ENTRY_DESCR(/;"	d
PagerExit	varsV.c	/^int PagerExit= 0;$/;"	v
PagerLevel	varsV.c	/^static int PagerLevel= 0;$/;"	v	file:
PagerName	varsV.c	/^char PagerName[128]= "$VARSPAGER";$/;"	v
PagerResult	varsV.c	/^char *PagerResult, *StreamResult, *Stream2Result;$/;"	v
Parbufferkey	varsedit.h	/^#define Parbufferkey	/;"	d
Parfile	varsedit.h	/^#define Parfile	/;"	d
Parfile_Context	varsedit.h	/^} Parfile_Context;$/;"	t	typeref:struct:parfile_context
Parfilecopy	varsedit.h	/^#define Parfilecopy	/;"	d
Parfiledummy	varsedit.h	/^#define Parfiledummy	/;"	d
Parfiledummy2	varsedit.h	/^#define Parfiledummy2	/;"	d
Parfilename	varsedit.h	/^#define Parfilename	/;"	d
Parlinelength	varsedit.h	/^#define Parlinelength	/;"	d
Parlinenumber	varsedit.h	/^#define Parlinenumber	/;"	d
Parlineposition	varsedit.h	/^#define Parlineposition	/;"	d
Parlinesread	varsedit.h	/^#define Parlinesread	/;"	d
Parposition	varsedit.h	/^#define Parposition	/;"	d
Permute	mxt.c	/^int Permute( a, n, t)			\/* permute array a of length n and type t *\/$/;"	f
PrintRememberList_on_Exit	vars-standalone.c	/^short lfree_alien= 1, PrintRememberList_on_Exit= 0;$/;"	v
Processed_Buffer	varsV.c	/^char Processed_Buffer[64];$/;"	v
ProgName	Macros.h	/^#define ProgName	/;"	d
RAD	mxt.h	/^#define RAD /;"	d
REF	regex.c	/^#define REF /;"	d	file:
REFERENCE_OP	varsintr.h	/^#define REFERENCE_OP	/;"	d
REFERENCE_OP2	varsintr.h	/^#define REFERENCE_OP2	/;"	d
REGISTER	regex.c	/^#define REGISTER	/;"	d	file:
REGISTER	vars-standalone.c	/^#	define REGISTER	/;"	d	file:
RESET_CHANGED_FIELD	varsintr.h	/^#define RESET_CHANGED_FIELD(/;"	d
RESET_CHANGED_FLAG	varsintr.h	/^#define RESET_CHANGED_FLAG(/;"	d
RETURN	regex.c	/^#define RETURN(/;"	d	file:
RETURN	regex.c	/^#undef RETURN$/;"	d	file:
RET_SHORT	varsedit.h	/^#define RET_SHORT	/;"	d
RIGHT_BRACE	varsintr.h	/^#define RIGHT_BRACE /;"	d
ROOTPOINTER_FAILURES	vars-standalone.h	/^#define ROOTPOINTER_FAILURES /;"	d
Read_parfile	varsP.c	/^int Read_parfile( x)$/;"	f
Reference_Variable	varsV.c	/^VariableSelection *Reference_Variable= NULL;$/;"	v
Reference_Variables	varsV.c	/^int Reference_Variables= 0;$/;"	v
Remember	vars-standalone.h	/^typedef struct Remember{$/;"	s
RememberKey	vars-standalone.h	/^} RememberKey;$/;"	t	typeref:struct:Remember
RememberList	vars-standalone.h	/^	struct rememberlist *RememberList;$/;"	m	struct:Remember	typeref:struct:Remember::rememberlist
RememberList	vars-standalone.h	/^} RememberList;$/;"	t	typeref:struct:rememberlist
RememberSize	vars-standalone.h	/^	unsigned long RememberSize;$/;"	m	struct:Remember
Remove_Disposable	vars-standalone.c	/^pointer Remove_Disposable( pointer x)$/;"	f
RmKey	vars-standalone.h	/^	struct Remember *RmKey;$/;"	m	struct:rememberlist	typeref:struct:rememberlist::Remember
RootPointer	vars-standalone.h	/^	struct RootPointer *RootPointer;$/;"	m	struct:RootPointer	typeref:struct:RootPointer::RootPointer
RootPointer	vars-standalone.h	/^typedef struct RootPointer{$/;"	s
RootPointer	vars-standalone.h	/^} RootPointer;$/;"	t	typeref:struct:RootPointer
RootPointer_Base	vars-standalone.h	/^#define RootPointer_Base(/;"	d
RootPointer_Check	vars-standalone.c	/^int RootPointer_Check( pointer p)$/;"	f
RootPointer_CheckLength	vars-standalone.c	/^int RootPointer_CheckLength( pointer p, int n, char *mesg)$/;"	f
RootPointer_Extra	vars-standalone.h	/^#define RootPointer_Extra(/;"	d
RootPointer_Failure	vars-standalone.c	/^char *RootPointer_Failure[ROOTPOINTER_FAILURES]= {$/;"	v
RootPointer_ISize	vars-standalone.h	/^#define RootPointer_ISize(/;"	d
RootPointer_Length	vars-standalone.h	/^#define RootPointer_Length(/;"	d
RootPointer_MaxISize	vars-standalone.h	/^#define RootPointer_MaxISize(/;"	d
RootPointer_MaxLength	vars-standalone.h	/^#define RootPointer_MaxLength(/;"	d
RootPointer_Size	vars-standalone.h	/^#define RootPointer_Size(/;"	d
RootPointer__Base	vars-standalone.h	/^#define RootPointer__Base(/;"	d
S0	sincos.c	/^#define	S0	/;"	d	file:
S1	sincos.c	/^#define	S1	/;"	d	file:
S2	sincos.c	/^#define	S2	/;"	d	file:
S3	sincos.c	/^#define	S3	/;"	d	file:
S4	sincos.c	/^#define	S4	/;"	d	file:
S5	sincos.c	/^#define	S5	/;"	d	file:
SAS_Add	mxt.c	/^SimpleAngleStats *SAS_Add( a,b)$/;"	f
SAS_Add_	mxt.h	/^#define SAS_Add_(/;"	d
SAS_Add_Data	mxt.c	/^SimpleAngleStats *SAS_Add_Data( a, count, sum, weight)$/;"	f
SAS_Add_Data_	mxt.h	/^#define SAS_Add_Data_(/;"	d
SAS_Add_Squared_Data	mxt.c	/^SimpleAngleStats *SAS_Add_Squared_Data( a, count, sum, sumsq, weight)$/;"	f
SAS_Add_Squared_Data_	mxt.h	/^#define SAS_Add_Squared_Data_(/;"	d
SAS_Mean	mxt.c	/^double SAS_Mean( SAS)$/;"	f
SAS_Mean_	mxt.h	/^#define SAS_Mean_(/;"	d
SAS_Reset	mxt.h	/^#define SAS_Reset(/;"	d
SAS_Reset_	mxt.h	/^#define SAS_Reset_(/;"	d
SAS_St_Dev	mxt.c	/^double SAS_St_Dev( SAS)$/;"	f
SAS_St_Dev_	mxt.h	/^#define SAS_St_Dev_(/;"	d
SAS_Sum	mxt.c	/^SimpleAngleStats *SAS_Sum( a,b)$/;"	f
SAS_Sum_	mxt.h	/^#define SAS_Sum_(/;"	d
SAS_sprint	mxt.c	/^char *SAS_sprint( char *buffer, char *format, char *sep, double min_err, SimpleAngleStats *a)$/;"	f
SAS_sprint_	mxt.h	/^#define SAS_sprint_(/;"	d
SAS_sprint_full	mxt.c	/^char *SAS_sprint_full( char *buffer, char *format, char *sep, double min_err, SimpleAngleStats *a)$/;"	f
SAS_sprint_full_	mxt.h	/^#define SAS_sprint_full_(/;"	d
SETBIT	Macros.h	/^#define SETBIT(/;"	d
SET_CHANGED_FIELD	varsintr.h	/^#define SET_CHANGED_FIELD(/;"	d
SET_CHANGED_FLAG	varsintr.h	/^#define SET_CHANGED_FLAG(/;"	d
SET_INTERNAL	varsintr.h	/^#define SET_INTERNAL	/;"	d
SHIFT_STACK	cpu.h	/^#	define SHIFT_STACK(/;"	d
SHORT_DECI	varsA.c	/^#	define SHORT_DECI	/;"	d	file:
SHORT_HEXA	varsA.c	/^#	define SHORT_HEXA	/;"	d	file:
SHORT_PVAR	varsedit.h	/^	CHAR_PVAR, SHORT_PVAR, INT_PVAR, LONG_PVAR, FLOAT_PVAR, DOUBLE_PVAR, FUNCTION_PVAR,$/;"	e	enum:TypeOfVariable
SHORT_VAR	varsedit.h	/^	CHAR_VAR=	1, UCHAR_VAR, SHORT_VAR, USHORT_VAR, INT_VAR,$/;"	e	enum:TypeOfVariable
SHOW_INTERNAL	varsintr.h	/^#define SHOW_INTERNAL	/;"	d
SIGN	Macros.h	/^#	define SIGN(/;"	d
SIN	mxt.c	/^double SIN(x)						\/* linear approx. of a sine	*\/$/;"	f
SINCOS	mxt.c	/^void SINCOS(x, s, c)				\/* linear approx. of a sine	& cosine	*\/$/;"	f
SINC_FILE	varsedit.h	/^typedef enum SincType { SINC_STRING=0xABCDEF09, SINC_FILE=0x4AF3BD8C } SincType;$/;"	e	enum:SincType
SINC_STRING	varsedit.h	/^typedef enum SincType { SINC_STRING=0xABCDEF09, SINC_FILE=0x4AF3BD8C } SincType;$/;"	e	enum:SincType
SSE_MATHFUN_WITH_CODE	sincos.c	/^#	define SSE_MATHFUN_WITH_CODE$/;"	d	file:
SS_Add	mxt.c	/^SimpleStats *SS_Add( a,b)$/;"	f
SS_Add_	mxt.h	/^#	define SS_Add_(/;"	d
SS_Add_Data	mxt.c	/^SimpleStats *SS_Add_Data( a, count, sum, weight)$/;"	f
SS_Add_Data_	mxt.h	/^#	define SS_Add_Data_(/;"	d
SS_Add_Data_Array_	mxt.h	/^#define SS_Add_Data_Array_(/;"	d
SS_Add_Squared_Data	mxt.c	/^SimpleStats *SS_Add_Squared_Data( a, count, sumsq, weight)$/;"	f
SS_Add_Squared_Data_	mxt.h	/^#	define SS_Add_Squared_Data_(/;"	d
SS_Add_Squared_Data_Array_	mxt.h	/^#define SS_Add_Squared_Data_Array_(/;"	d
SS_Mean	mxt.c	/^double SS_Mean( SS)$/;"	f
SS_Mean_	mxt.h	/^#define SS_Mean_(/;"	d
SS_Mean_Div	mxt.c	/^double SS_Mean_Div( SSa, SSb)$/;"	f
SS_Mean_Div_	mxt.h	/^#define SS_Mean_Div_(/;"	d
SS_Reset	mxt.h	/^#define SS_Reset(/;"	d
SS_Reset_	mxt.h	/^#define SS_Reset_(/;"	d
SS_SKEW	mxt.h	/^#define SS_SKEW$/;"	d
SS_Skew	mxt.c	/^double SS_Skew( SS)$/;"	f
SS_Skew_	mxt.h	/^#	define SS_Skew_(/;"	d
SS_St_Dev	mxt.c	/^double SS_St_Dev( SS)$/;"	f
SS_St_Dev_	mxt.h	/^#define SS_St_Dev_(/;"	d
SS_Sum	mxt.c	/^SimpleStats *SS_Sum( a,b)$/;"	f
SS_Sum_	mxt.h	/^#define SS_Sum_(/;"	d
SS_sprint	mxt.c	/^char *SS_sprint( char *buffer, char *format, char *sep, double min_err, SimpleStats *a)$/;"	f
SS_sprint_	mxt.h	/^#define SS_sprint_(/;"	d
SS_sprint_full	mxt.c	/^char *SS_sprint_full( char *buffer, char *format, char *sep, double min_err, SimpleStats *a)$/;"	f
SS_sprint_full_	mxt.h	/^#define SS_sprint_full_(/;"	d
SS_weight_scaler	mxt.c	/^double SS_weight_scaler= 1;$/;"	v
SSputc	varsS.c	/^Sinc *SSputc( int c, Sinc *sinc )$/;"	f
SSputs	varsS.c	/^Sinc *SSputs( char *text, Sinc *sinc )$/;"	f
SString_Dynamic	varsedit.h	/^typedef enum SincString{ SString_Fixed, SString_Dynamic, SString_Global } SincString;$/;"	e	enum:SincString
SString_Fixed	varsedit.h	/^typedef enum SincString{ SString_Fixed, SString_Dynamic, SString_Global } SincString;$/;"	e	enum:SincString
SString_Global	varsedit.h	/^typedef enum SincString{ SString_Fixed, SString_Dynamic, SString_Global } SincString;$/;"	e	enum:SincString
STACKUP	cpu.h	/^#define STACKUP$/;"	d
STR	ALLOCA.h	/^#		define STR(/;"	d
STRDUPA	ALLOCA.h	/^#	define STRDUPA(/;"	d
STRING	SymbolTable.h	/^#	define STRING(/;"	d
STRING	vars-standalone.h	/^#	define STRING(/;"	d
SYMBOL_LOOKUP	SymbolTable.h	/^#define SYMBOL_LOOKUP	/;"	d
SYMBOSYNOTAB	SymbolTable.h	/^#	define SYMBOSYNOTAB /;"	d
SYNONYM_SYMBOL	SymbolTable.h	/^#define SYNONYM_SYMBOL	/;"	d
SYS_ERRLIST	Macros.h	/^#define SYS_ERRLIST	/;"	d
SYS_NERR	Macros.h	/^#define SYS_NERR	/;"	d
SafePager	varsV.c	/^char SafePager[128]= "$VARSPAGER";$/;"	v
Save_VarsHistFileName	varsV.c	/^char Save_VarsHistFileName[256];$/;"	v
Save_VarsHistLine	varsV.c	/^Save_VarsHistLine(char *line )$/;"	f
Seof	varsedit.h	/^#define Seof(/;"	d
Serror	varsedit.h	/^#define Serror(/;"	d
SetEnv	vars-standalone.c	/^char *SetEnv( char *n, char *v)$/;"	f
Set_SymbolValue	varsV.c	/^Variable_t *Set_SymbolValue( pointer x, int type, unsigned long n_items, char *items)$/;"	f
Set_SymbolValue_Verbose	varsV.c	/^int Set_SymbolValue_Verbose= False;$/;"	v
Sflush	varsS.c	/^int Sflush( Sinc *sinc )$/;"	f
SimpleAngleStats	mxt.h	/^} SimpleAngleStats;$/;"	t	typeref:struct:simpleanglestats
SimpleStats	mxt.h	/^} SimpleStats;$/;"	t	typeref:struct:simplestats
Sin	mxt.h	/^#define Sin(/;"	d
SinCos	Macros.h	/^#define SinCos(/;"	d
SinS	sincos.c	/^double SinS( double x )$/;"	f	file:
Sinc	varsedit.h	/^} Sinc;$/;"	t	typeref:struct:string
SincAllowExpansion	varsS.c	/^int SincAllowExpansion( Sinc *sinc )$/;"	f
SincString	varsedit.h	/^typedef enum SincString{ SString_Fixed, SString_Dynamic, SString_Global } SincString;$/;"	g
SincString	varsedit.h	/^typedef enum SincString{ SString_Fixed, SString_Dynamic, SString_Global } SincString;$/;"	t	typeref:enum:SincString
SincString_Behaviour	varsS.c	/^int SincString_Behaviour= SString_Fixed;$/;"	v
SincType	varsedit.h	/^typedef enum SincType { SINC_STRING=0xABCDEF09, SINC_FILE=0x4AF3BD8C } SincType;$/;"	g
SincType	varsedit.h	/^typedef enum SincType { SINC_STRING=0xABCDEF09, SINC_FILE=0x4AF3BD8C } SincType;$/;"	t	typeref:enum:SincType
Sinc_base	varsS.c	/^Sinc *Sinc_base( Sinc *sinc, long base )$/;"	f
Sinc_file	varsS.c	/^Sinc *Sinc_file( Sinc *sinc, FILE *file, long cnt, long base )$/;"	f
Sinc_string	varsS.c	/^Sinc *Sinc_string( Sinc *sinc, char *string, long cnt, long base )$/;"	f
Sinc_string_behaviour	varsS.c	/^Sinc *Sinc_string_behaviour( Sinc *sinc, char *string, long cnt, long base, SincString behaviour )$/;"	f
Sprint_array	varsV.c	/^RET_SHORT Sprint_array( Sinc *fp, TypeOfVariable type, int len, pointer data)$/;"	f
Sprint_var	varsV.c	/^RET_SHORT Sprint_var( Sinc *fp, Variable_t *var, int verbose_print)$/;"	f
Sprint_varMean	varsV.c	/^RET_SHORT Sprint_varMean( fp, var)$/;"	f
Sprint_var_value	varsV.c	/^int Sprint_var_value( Sinc *fp, Variable_t *var,$/;"	f
Sputc	varsS.c	/^int Sputc( int c, Sinc *sinc )$/;"	f
Sputs	varsS.c	/^int Sputs( char *text, Sinc *sinc )$/;"	f
Srewind	varsS.c	/^int Srewind( Sinc *sinc )$/;"	f
StdErr	mxt.c	/^#define StdErr /;"	d	file:
StdErr	vars-standalone.c	/^#define StdErr	/;"	d	file:
StdErr	varsA.c	/^#define StdErr	/;"	d	file:
StdInput	varsV.c	/^char StdInput[256], StdOutput[256];$/;"	v
StdOutput	varsV.c	/^char StdInput[256], StdOutput[256];$/;"	v
Str_par	varsedit.h	/^#define Str_par(/;"	d
Str_par_default	varsP.c	/^void Str_par_default( s, t, def)$/;"	f
Stream2Name	varsV.c	/^char Stream2Name[128]= "nl | tee -a \/dev\/tty | wc";$/;"	v
Stream2Result	varsV.c	/^char *PagerResult, *StreamResult, *Stream2Result;$/;"	v
StreamName	varsV.c	/^char StreamName[128]= "nl | tee -a \/dev\/tty | wc";$/;"	v
StreamResult	varsV.c	/^char *PagerResult, *StreamResult, *Stream2Result;$/;"	v
SubVisAngle	mxt.c	/^double SubVisAngle( double R, double r )$/;"	f
SubVisAngle_threshold	mxt.c	/^double SubVisAngle_threshold= 0.1;$/;"	v
SymbolSynonym	SymbolTable.h	/^} SymbolSynonym;$/;"	t	typeref:struct:syno
SymbolTable	SymbolTable.h	/^typedef struct SymbolTable{$/;"	s
SymbolTable	SymbolTable.h	/^} SymbolTable;$/;"	t	typeref:struct:SymbolTable
SymbolTable_List	SymbolTable.h	/^typedef struct SymbolTable_List{$/;"	s
SymbolTable_List	SymbolTable.h	/^} SymbolTable_List;$/;"	t	typeref:struct:SymbolTable_List
SymbolTable_ListLength	SymbolTable.h	/^#define SymbolTable_ListLength(/;"	d
SymbolValue_change_handler	varsV.c	/^VariableChange_method SymbolValue_change_handler= NULL;$/;"	v
Symbol_ObjectTypeName	SymbolTable.h	/^#define Symbol_ObjectTypeName(/;"	d
Symbol_Timing	SymbolTable.h	/^#define Symbol_Timing(/;"	d
TRACENAMELENGTH	vars-standalone.h	/^#define TRACENAMELENGTH	/;"	d
TRACENAMELENGTH_1	vars-standalone.h	/^#define TRACENAMELENGTH_1	/;"	d
TRUE	vars-standalone.h	/^#define TRUE	/;"	d
TSTBIT	Macros.h	/^#define TSTBIT(/;"	d
Tan	mxt.h	/^#define Tan(/;"	d
True	Macros.h	/^#	define True /;"	d
TypeOfVariable	varsedit.h	/^typedef enum TypeOfVariable {$/;"	g
TypeOfVariable	varsedit.h	/^} TypeOfVariable;$/;"	t	typeref:enum:TypeOfVariable
UCHAR_VAR	varsedit.h	/^	CHAR_VAR=	1, UCHAR_VAR, SHORT_VAR, USHORT_VAR, INT_VAR,$/;"	e	enum:TypeOfVariable
UINT_VAR	varsedit.h	/^	UINT_VAR, LONG_VAR, ULONG_VAR, HEX_VAR, FLOAT_VAR, DOUBLE_VAR,$/;"	e	enum:TypeOfVariable
ULONG	SymbolTable.h	/^typedef unsigned long ULONG;$/;"	t
ULONG_VAR	varsedit.h	/^	UINT_VAR, LONG_VAR, ULONG_VAR, HEX_VAR, FLOAT_VAR, DOUBLE_VAR,$/;"	e	enum:TypeOfVariable
UNKNOWN	SymbolTable.h	/^#define UNKNOWN	/;"	d
USE_HOST_NANFS	NaN.h	/^#	define USE_HOST_NANFS$/;"	d
USE_SSE2	sse_mathfun.h	/^#		define USE_SSE2$/;"	d
USE_SSE2	sse_mathfun.h	/^#	define USE_SSE2$/;"	d
USE_SSE3	sse_mathfun.h	/^#		define USE_SSE3$/;"	d
USE_SSE3	sse_mathfun.h	/^#	define USE_SSE3$/;"	d
USE_SSE4	sse_mathfun.h	/^#		define USE_SSE4$/;"	d
USE_SSE4	sse_mathfun.h	/^#	define USE_SSE4$/;"	d
USE_SSE_AUTO	sincos.c	/^#	define USE_SSE_AUTO$/;"	d	file:
USHORT_VAR	varsedit.h	/^	CHAR_VAR=	1, UCHAR_VAR, SHORT_VAR, USHORT_VAR, INT_VAR,$/;"	e	enum:TypeOfVariable
Units_per_Radian	mxt.c	/^double Units_per_Radian= 57.2957795130823;$/;"	v
UserMem	vars-standalone.h	/^	unsigned char *UserMem;$/;"	m	struct:RootPointer
UserMemory	vars-standalone.h	/^	pointer Memory, UserMemory;$/;"	m	struct:Remember
VARIABLE	varsedit.h	/^#define VARIABLE(/;"	d
VARIABLECHANGE_METHOD	varsedit.h	/^#define VARIABLECHANGE_METHOD(/;"	d
VARIABLE_DEFINITION_SYSTEM	varsedit.h	/^#define VARIABLE_DEFINITION_SYSTEM(/;"	d
VARIABLE_DEFINITION_USER	varsedit.h	/^#define VARIABLE_DEFINITION_USER(/;"	d
VARIABLE_SYMBOL	SymbolTable.h	/^#define VARIABLE_SYMBOL	/;"	d
VARIABLE_SYMBOL_ENTRY	SymbolTable.h	/^#define VARIABLE_SYMBOL_ENTRY(/;"	d
VARIABLE_SYMBOL_ENTRY_DESCR	SymbolTable.h	/^#define VARIABLE_SYMBOL_ENTRY_DESCR(/;"	d
VARIABLE_VAR	varsedit.h	/^	COMMAND_VAR, VARIABLE_VAR,$/;"	e	enum:TypeOfVariable
VARIABLEs_SYMBOL_ENTRY	SymbolTable.h	/^#define VARIABLEs_SYMBOL_ENTRY(/;"	d
VARIABLEs_SYMBOL_ENTRY_DESCR	SymbolTable.h	/^#define VARIABLEs_SYMBOL_ENTRY_DESCR(/;"	d
VARSEDIT_LENGTH	varsV.c	/^#define VARSEDIT_LENGTH	/;"	d	file:
VARS_INTERNALS	varsV.c	/^int VARS_INTERNALS= sizeof(vars_internals)\/sizeof(Variable);$/;"	v
VARS_SOURCE	varsV.c	/^#define VARS_SOURCE$/;"	d	file:
VARS_STANDALONE	vars-standalone.h	/^#	define VARS_STANDALONE$/;"	d
VARS_STANDALONE_INTERNAL	lowlevel_timer.c	/^#	define VARS_STANDALONE_INTERNAL$/;"	d	file:
VARS_STANDALONE_INTERNAL	mxt.c	/^#	define VARS_STANDALONE_INTERNAL$/;"	d	file:
VARS_STANDALONE_INTERNAL	regex.c	/^#	define VARS_STANDALONE_INTERNAL$/;"	d	file:
VARS_STANDALONE_INTERNAL	vars-standalone.c	/^#	define VARS_STANDALONE_INTERNAL$/;"	d	file:
VARS_STANDALONE_INTERNAL	varsA.c	/^#	define VARS_STANDALONE_INTERNAL$/;"	d	file:
VARS_STANDALONE_INTERNAL	varsP.c	/^#	define VARS_STANDALONE_INTERNAL$/;"	d	file:
VARS_STANDALONE_INTERNAL	varsS.c	/^#	define VARS_STANDALONE_INTERNAL$/;"	d	file:
VARS_STANDALONE_INTERNAL	varsV.c	/^#	define VARS_STANDALONE_INTERNAL$/;"	d	file:
VARTYPES	varsedit.h	/^	VARTYPES$/;"	e	enum:TypeOfVariable
VAR_CHANGED	varsedit.h	/^#define VAR_CHANGED	/;"	d
VAR_REASSIGN	varsedit.h	/^#define VAR_REASSIGN	/;"	d
VAR_UNCHANGED	varsedit.h	/^#define VAR_UNCHANGED	/;"	d
VEL_changed	varsV.c	/^int VarsEdit_Length= 1024, VEL_changed= 0;$/;"	v
VarChanges	varsV.c	/^static int VarChanges= 0, no_recurse= False;$/;"	v	file:
VarType	varsV.c	/^char *VarType[MAX_VARTYPE+1]= {$/;"	v
Var_Changed_Field	varsedit.h	/^} Var_Changed_Field;$/;"	t	typeref:struct:var_changed_field
Var_list	varsV.c	/^typedef struct Var_list{$/;"	s	file:
Var_list	varsV.c	/^} Var_list;$/;"	t	typeref:struct:Var_list	file:
Variable	varsedit.h	/^	typedef struct Variable{$/;"	s
Variable	varsedit.h	/^	} Variable;$/;"	t	typeref:struct:Variable
VariableSelection	varsedit.h	/^} VariableSelection; $/;"	t	typeref:struct:variableselection
VariableSet	varsedit.h	/^} VariableSet;$/;"	t	typeref:union:variableset
VariableType	varsedit.h	/^} VariableType;$/;"	t	typeref:union:variabletype
Variable_Operators	varsV.c	/^char Variable_Operators[OPERATORS+1]= "^*+\/-:|";$/;"	v
Variable_t	varsedit.h	/^	typedef struct Variable_t{$/;"	s
Variable_t	varsedit.h	/^	} Variable_t;$/;"	t	typeref:struct:Variable_t
Vars	varsedit.h	/^	Variable_t *Vars;$/;"	m	struct:variableselection
VarsA_List	varsA.c	/^SymbolTable_List VarsA_List[]= {$/;"	v
VarsA_List_Length	varsA.c	/^int VarsA_List_Length= SymbolTable_ListLength(VarsA_List);$/;"	v
VarsEdit_Length	varsV.c	/^int VarsEdit_Length= 1024, VEL_changed= 0;$/;"	v
VarsExitLine	varsV.c	/^char **VarsExitLine;$/;"	v
VarsExitLines	varsV.c	/^int VarsExitLines[5]= {0, 64, 0, 0, 0};$/;"	v
VarsMeanPrinting	varsV.c	/^int VarsPagerActive= False, VarsMeanPrinting= False;$/;"	v
VarsP_List	varsP.c	/^SymbolTable_List VarsP_List[]= {$/;"	v
VarsP_List_Length	varsP.c	/^int VarsP_List_Length= SymbolTable_ListLength(VarsP_List);$/;"	v
VarsPagerActive	varsV.c	/^int VarsPagerActive= False, VarsMeanPrinting= False;$/;"	v
VarsS_List	varsS.c	/^SymbolTable_List VarsS_List[]= {$/;"	v
VarsS_List_Length	varsS.c	/^int VarsS_List_Length= SymbolTable_ListLength(VarsS_List);$/;"	v
VarsSeparator	varsV.c	/^char VarsSeparator[2]= "|";$/;"	v
VarsV_List	varsV.c	/^SymbolTable_List VarsV_List[]= {$/;"	v
VarsV_List_Length	varsV.c	/^int VarsV_List_Length= SymbolTable_ListLength(VarsV_List);$/;"	v
WVP	varsV.c	/^#define WVP	/;"	d	file:
WWatch	varsV.c	/^static int Watch= True, *WWatch= NULL;$/;"	v	file:
Watch	varsV.c	/^static int Watch= True, *WWatch= NULL;$/;"	v	file:
Watch_Variable	varsV.c	/^typedef struct Watch_Variable{$/;"	s	file:
Watch_Variable	varsV.c	/^} Watch_Variable;$/;"	t	typeref:struct:Watch_Variable	file:
Watch_Variables	varsV.c	/^static Watch_Variable *Watch_Variables;$/;"	v	file:
Writelog	vars-standalone.h	/^#define Writelog(/;"	d
XGALLOCA	ALLOCA.h	/^#		define XGALLOCA(/;"	d
XORBIT	Macros.h	/^#define XORBIT(/;"	d
_64TYPEDEFS_H	64typedefs.h	/^#define _64TYPEDEFS_H$/;"	d
_ACos	mxt.c	/^double _ACos(x)$/;"	f
_ALLOCA	ALLOCA.h	/^#			define _ALLOCA(/;"	d
_ALLOCA	ALLOCA.h	/^#		define _ALLOCA(/;"	d
_ASin	mxt.c	/^double _ASin(x)$/;"	f
_ATan	mxt.c	/^double _ATan(x)$/;"	f
_ATan2	mxt.c	/^double _ATan2(x, y)$/;"	f
_Arg	mxt.c	/^double _Arg(x, y)$/;"	f
_CPU_H	cpu.h	/^#define _CPU_H$/;"	d
_CXERRNO_H	cxerrno.h	/^#define _CXERRNO_H$/;"	d
_CXTRIGO_H	cxtrigo.h	/^#define _CXTRIGO_H$/;"	d
_CX_WRITABLE_STRINGS_H	CX_writable_strings.h	/^#define _CX_WRITABLE_STRINGS_H$/;"	d
_Cos	mxt.c	/^double _Cos( x)$/;"	f
_Euclidian_Dist	mxt.c	/^double _Euclidian_Dist(dx,dy,dz)$/;"	f
_Euclidian_SQDist	mxt.c	/^double _Euclidian_SQDist(dx,dy,dz)$/;"	f
_GetEnv	vars-standalone.c	/^char *_GetEnv( char *n)		\/* find an env. var in EnvDir:<n>	*\/$/;"	f
_HPUX_C_	cpu.h	/^#define _HPUX_C_$/;"	d
_IDENTIFY	Macros.h	/^#		define _IDENTIFY(/;"	d
_IDENTIFY	Macros.h	/^#	define _IDENTIFY(/;"	d
_IDENTIFY	vars-standalone.h	/^#		define _IDENTIFY(/;"	d
_IDENTIFY	vars-standalone.h	/^#	define _IDENTIFY(/;"	d
_INF	mxt.c	/^int _INF( x)$/;"	f
_Inf	mxt.c	/^int _Inf( x)$/;"	f
_LOWLEVEL_TIMER_H	lowlevel_timer.h	/^#define _LOWLEVEL_TIMER_H$/;"	d
_MACRO_H	Macros.h	/^#define _MACRO_H$/;"	d
_MATHDEF_H	mathdef.h	/^#define _MATHDEF_H$/;"	d
_MM_SET1_PD	sse_mathfun.h	/^#	define _MM_SET1_PD(/;"	d
_MM_SET1_PS	sse_mathfun.h	/^#	define _MM_SET1_PS(/;"	d
_MM_SETR_PD	sse_mathfun.h	/^#	define _MM_SETR_PD(/;"	d
_MM_SETR_PS	sse_mathfun.h	/^#	define _MM_SETR_PS(/;"	d
_MM_SETZERO_PD	sse_mathfun.h	/^#	define _MM_SETZERO_PD(/;"	d
_MM_SETZERO_PS	sse_mathfun.h	/^#	define _MM_SETZERO_PS(/;"	d
_MM_SETZERO_SI128	sse_mathfun.h	/^#	define _MM_SETZERO_SI128(/;"	d
_MM_SETZERO_SI64	sse_mathfun.h	/^#	define _MM_SETZERO_SI64(/;"	d
_MM_SET_PD	sse_mathfun.h	/^#	define _MM_SET_PD(/;"	d
_MM_SET_PS	sse_mathfun.h	/^#	define _MM_SET_PS(/;"	d
_MXT_H	mxt.h	/^#define _MXT_H$/;"	d
_NAN_H	NaN.h	/^#define _NAN_H$/;"	d
_NaN	mxt.c	/^int _NaN( x)$/;"	f
_NaNorInf	mxt.c	/^int _NaNorInf( x)$/;"	f
_PARSE_VARLINE_RETURN	varsV.c	/^#	define _PARSE_VARLINE_RETURN(/;"	d	file:
_PD_CONST	sse_mathfun.h	/^#define _PD_CONST(/;"	d
_PD_CONST_TYPE	sse_mathfun.h	/^#define _PD_CONST_TYPE(/;"	d
_PI32_CONST	sse_mathfun.h	/^#define _PI32_CONST(/;"	d
_PS_CONST	sse_mathfun.h	/^#define _PS_CONST(/;"	d
_PS_CONST_TYPE	sse_mathfun.h	/^#define _PS_CONST_TYPE(/;"	d
_PagerResult	varsV.c	/^char *_PagerResult()$/;"	f
_Parbufferkey	varsedit.h	/^	struct Remember *_Parbufferkey;$/;"	m	struct:parfile_context	typeref:struct:parfile_context::Remember
_Parfile	varsedit.h	/^	FILE *_Parfile;$/;"	m	struct:parfile_context
_Parfilecopy	varsedit.h	/^	char **_Parfilecopy, *_Parfiledummy, *_Parfiledummy2;$/;"	m	struct:parfile_context
_Parfiledummy	varsedit.h	/^	char **_Parfilecopy, *_Parfiledummy, *_Parfiledummy2;$/;"	m	struct:parfile_context
_Parfiledummy2	varsedit.h	/^	char **_Parfilecopy, *_Parfiledummy, *_Parfiledummy2;$/;"	m	struct:parfile_context
_Parfilename	varsedit.h	/^	char *_Parfilename;$/;"	m	struct:parfile_context
_Parlinelength	varsedit.h	/^	int _Parlinenumber, _Parlinelength, _Parlinesread;$/;"	m	struct:parfile_context
_Parlinenumber	varsedit.h	/^	int _Parlinenumber, _Parlinelength, _Parlinesread;$/;"	m	struct:parfile_context
_Parlineposition	varsedit.h	/^	long _Parposition, _Parlineposition;$/;"	m	struct:parfile_context
_Parlinesread	varsedit.h	/^	int _Parlinenumber, _Parlinelength, _Parlinesread;$/;"	m	struct:parfile_context
_Parposition	varsedit.h	/^	long _Parposition, _Parlineposition;$/;"	m	struct:parfile_context
_REALLOCA	ALLOCA.h	/^#	define _REALLOCA(/;"	d
_RootPointer_Base	vars-standalone.c	/^RootPointer *_RootPointer_Base(pointer x)$/;"	f
_RootPointer_ISize	vars-standalone.c	/^int _RootPointer_ISize(pointer x)$/;"	f
_RootPointer_Length	vars-standalone.c	/^int _RootPointer_Length(pointer x)$/;"	f
_RootPointer_Size	vars-standalone.c	/^unsigned long _RootPointer_Size(pointer x)$/;"	f
_SSE_MATHFUN_H	sse_mathfun.h	/^#define _SSE_MATHFUN_H$/;"	d
_STDARG_H	varsintr.h	/^#		define _STDARG_H$/;"	d
_STDARG_H	varsintr.h	/^#	define _STDARG_H$/;"	d
_STDIO_H	vars-standalone.h	/^#		define _STDIO_H$/;"	d
_SYMBOLTABLE_H	SymbolTable.h	/^#define _SYMBOLTABLE_H$/;"	d
_SetEnv	vars-standalone.c	/^char *_SetEnv( char *n, char *v)			\/* find an env. var in memory (set)	*\/$/;"	f
_Sflush	varsedit.h	/^#define _Sflush(/;"	d
_Sin	mxt.c	/^double _Sin( x)$/;"	f
_TIME_H	vars-standalone.h	/^#		define _TIME_H$/;"	d
_Tan	mxt.c	/^double _Tan(x)$/;"	f
_UNIX_C_	cpu.h	/^#define _UNIX_C_$/;"	d
_VARSEDIT_H	varsedit.h	/^#define _VARSEDIT_H$/;"	d
_VARS_SOURCE	varsintr.h	/^#define _VARS_SOURCE$/;"	d
_VARS_STANDALONE_H	vars-standalone.h	/^#define _VARS_STANDALONE_H$/;"	d
_Variable	varsedit.h	/^	typedef struct _Variable{$/;"	s
_Variable	varsedit.h	/^	} _Variable;$/;"	t	typeref:struct:_Variable
_WIN32_h	win32.h	/^#define _WIN32_h$/;"	d
__CX_FreeRemember	vars-standalone.c	/^unsigned long __CX_FreeRemember( struct Remember **rmkey, long de_allocmem, int (*pre_fun)(), char *msg )$/;"	f
__FUNC__	vars-standalone.h	/^#	define __FUNC__ /;"	d
__GetEnv	vars-standalone.c	/^char *__GetEnv( char *n, char *pref, int add_prefix )$/;"	f
__IDENTIFY	Macros.h	/^#	define __IDENTIFY(/;"	d
__IDENTIFY	vars-standalone.h	/^#define __IDENTIFY(/;"	d
__STDC__	defun.h	/^#	define __STDC__	/;"	d
__TIME__	vars-standalone.h	/^#	define __TIME__ /;"	d
__ascanf_Function_method	varsedit.h	/^typedef int (*__ascanf_Function_method)(double args[ASCANF_MAX_ARGS],double *result, ascanf_Function *AF);$/;"	t
_atan2	mxt.c	/^double _atan2( x, y)$/;"	f
_atan3	mxt.c	/^double _atan3( x, y)$/;"	f
_base	varsedit.h	/^	long _cnt, _base, _tlen, alloc_len;$/;"	m	struct:string
_char	vars-standalone.h	/^	_file, _function, _char, _string, _short, _int, _long, _float, _double, _variable,$/;"	e	enum:objecttypes
_charP	vars-standalone.h	/^	_charP, _shortP, _intP, _longP, _floatP, _doubleP, _functionP, _rootpointer,$/;"	e	enum:objecttypes
_check_changed_field	varsV.c	/^static int _check_changed_field( fp, vars)$/;"	f	file:
_cnt	varsedit.h	/^	long _cnt, _base, _tlen, alloc_len;$/;"	m	struct:string
_d2str_factors	mxt.c	/^	_d2str_factors[]=$/;"	v
_d2str_factors_ext	mxt.c	/^int _d2str_factors_ext[]=$/;"	v
_do_Find_NamedSymbol	varsV.c	/^static int _do_Find_NamedSymbol( v, n, I, c)$/;"	f	file:
_double	vars-standalone.h	/^	_file, _function, _char, _string, _short, _int, _long, _float, _double, _variable,$/;"	e	enum:objecttypes
_doubleP	vars-standalone.h	/^	_charP, _shortP, _intP, _longP, _floatP, _doubleP, _functionP, _rootpointer,$/;"	e	enum:objecttypes
_dsign	mxt.c	/^int _dsign(x)$/;"	f
_edit_vars_arglist	varsV.c	/^static RET_SHORT _edit_vars_arglist( char *prompt )$/;"	f	file:
_eye	vars-standalone.h	/^	_something, _patch, _neuron, _eye, _paddler,$/;"	e	enum:objecttypes
_fgets	varsP.c	/^char *_fgets( char *buf, int len, FILE *fp)$/;"	f
_file	vars-standalone.h	/^	_file, _function, _char, _string, _short, _int, _long, _float, _double, _variable,$/;"	e	enum:objecttypes
_float	vars-standalone.h	/^	_file, _function, _char, _string, _short, _int, _long, _float, _double, _variable,$/;"	e	enum:objecttypes
_floatP	vars-standalone.h	/^	_charP, _shortP, _intP, _longP, _floatP, _doubleP, _functionP, _rootpointer,$/;"	e	enum:objecttypes
_function	vars-standalone.h	/^	_file, _function, _char, _string, _short, _int, _long, _float, _double, _variable,$/;"	e	enum:objecttypes
_functionP	vars-standalone.h	/^	_charP, _shortP, _intP, _longP, _floatP, _doubleP, _functionP, _rootpointer,$/;"	e	enum:objecttypes
_glowball	vars-standalone.h	/^	_glowball, _target, _worldLayer, _paddlersnout, _paddlerretina,$/;"	e	enum:objecttypes
_int	vars-standalone.h	/^	_file, _function, _char, _string, _short, _int, _long, _float, _double, _variable,$/;"	e	enum:objecttypes
_intP	vars-standalone.h	/^	_charP, _shortP, _intP, _longP, _floatP, _doubleP, _functionP, _rootpointer,$/;"	e	enum:objecttypes
_leaky_int_par	vars-standalone.h	/^	_leaky_int_par,$/;"	e	enum:objecttypes
_log_symboltable	varsV.c	/^static int _log_symboltable( v, N, i, C)$/;"	f	file:
_long	vars-standalone.h	/^	_file, _function, _char, _string, _short, _int, _long, _float, _double, _variable,$/;"	e	enum:objecttypes
_longP	vars-standalone.h	/^	_charP, _shortP, _intP, _longP, _floatP, _doubleP, _functionP, _rootpointer,$/;"	e	enum:objecttypes
_lround	mxt.c	/^long _lround(x)$/;"	f
_mm_abs_pd	sse_mathfun.h	/^	static inline v2df _mm_abs_pd( v2df a )$/;"	f
_mm_abs_pd	sse_mathfun.h	/^ 	static inline v2df _mm_abs_pd( v2df a )$/;"	f
_mm_clip_pd	sse_mathfun.h	/^static inline v2df _mm_clip_pd( v2df val, v2df valMin, v2df valMax )$/;"	f
_mm_cmpeq_ps	sse_mathfun.h	/^#define _mm_cmpeq_ps /;"	d
_mm_cmpgt_ps	sse_mathfun.h	/^#define _mm_cmpgt_ps /;"	d
_mm_cmplt_ps	sse_mathfun.h	/^#define _mm_cmplt_ps /;"	d
_mm_movehl_ps	sse_mathfun.h	/^#define _mm_movehl_ps /;"	d
_mm_setr_clipped_pd	sse_mathfun.h	/^static inline v2df _mm_setr_clipped_pd( double val0, double val1, v2df valMin, v2df valMax )$/;"	f
_neuron	vars-standalone.h	/^	_something, _patch, _neuron, _eye, _paddler,$/;"	e	enum:objecttypes
_nicer	varsV.c	/^_nicer( v, n, i, C)$/;"	f
_nothing	vars-standalone.h	/^	_nothing= 0,$/;"	e	enum:objecttypes
_paddleosc	vars-standalone.h	/^	_paddlerbrain, _paddlermechrec, _paddlepos, _paddleosc,$/;"	e	enum:objecttypes
_paddlepos	vars-standalone.h	/^	_paddlerbrain, _paddlermechrec, _paddlepos, _paddleosc,$/;"	e	enum:objecttypes
_paddler	vars-standalone.h	/^	_something, _patch, _neuron, _eye, _paddler,$/;"	e	enum:objecttypes
_paddlerbrain	vars-standalone.h	/^	_paddlerbrain, _paddlermechrec, _paddlepos, _paddleosc,$/;"	e	enum:objecttypes
_paddlermechrec	vars-standalone.h	/^	_paddlerbrain, _paddlermechrec, _paddlepos, _paddleosc,$/;"	e	enum:objecttypes
_paddlerretina	vars-standalone.h	/^	_glowball, _target, _worldLayer, _paddlersnout, _paddlerretina,$/;"	e	enum:objecttypes
_paddlersnout	vars-standalone.h	/^	_glowball, _target, _worldLayer, _paddlersnout, _paddlerretina,$/;"	e	enum:objecttypes
_parse_varline	varsV.c	/^long _parse_varline( char *buffer, Variable_t *vars, long n, long *changes, int cook_it, FILE **outfp, FILE **errfp)$/;"	f
_patch	vars-standalone.h	/^	_something, _patch, _neuron, _eye, _paddler,$/;"	e	enum:objecttypes
_perror	varsV.c	/^_perror()$/;"	f
_print_trace_stack	varsV.c	/^int _print_trace_stack()$/;"	f
_rootpointer	vars-standalone.h	/^	_charP, _shortP, _intP, _longP, _floatP, _doubleP, _functionP, _rootpointer,$/;"	e	enum:objecttypes
_round	mxt.c	/^int _round(x)$/;"	f
_seed48	varsV.c	/^static int _seed48( Variable_t *v, long N, long i, long C)$/;"	f	file:
_set_INF	mxt.c	/^IEEEfp *_set_INF( x)$/;"	f
_set_Inf	mxt.c	/^IEEEfp *_set_Inf( x, sign)$/;"	f
_set_NaN	mxt.c	/^IEEEfp *_set_NaN( x)$/;"	f
_short	vars-standalone.h	/^	_file, _function, _char, _string, _short, _int, _long, _float, _double, _variable,$/;"	e	enum:objecttypes
_shortP	vars-standalone.h	/^	_charP, _shortP, _intP, _longP, _floatP, _doubleP, _functionP, _rootpointer,$/;"	e	enum:objecttypes
_show_ascanf_functions	varsV.c	/^int _show_ascanf_functions()$/;"	f
_show_ref_vars	varsV.c	/^int _show_ref_vars()$/;"	f
_sign	mxt.c	/^int _sign(x)$/;"	f
_simpleanglestats	vars-standalone.h	/^	_simplestats, _simpleanglestats,$/;"	e	enum:objecttypes
_simplestats	vars-standalone.h	/^	_simplestats, _simpleanglestats,$/;"	e	enum:objecttypes
_something	vars-standalone.h	/^	_something, _patch, _neuron, _eye, _paddler,$/;"	e	enum:objecttypes
_string	vars-standalone.h	/^	_file, _function, _char, _string, _short, _int, _long, _float, _double, _variable,$/;"	e	enum:objecttypes
_suspend_ourselves	varsV.c	/^_suspend_ourselves()$/;"	f
_target	vars-standalone.h	/^	_glowball, _target, _worldLayer, _paddlersnout, _paddlerretina,$/;"	e	enum:objecttypes
_tlen	varsedit.h	/^	long _cnt, _base, _tlen, alloc_len;$/;"	m	struct:string
_variable	vars-standalone.h	/^	_file, _function, _char, _string, _short, _int, _long, _float, _double, _variable,$/;"	e	enum:objecttypes
_varsV_timer	varsV.c	/^vars_Time_Struct _varsV_timer, *varsV_timer= &_varsV_timer;$/;"	v
_vcc	varsV.c	/^_vcc()$/;"	f
_vps	varsV.c	/^_vps()$/;"	f
_worldLayer	vars-standalone.h	/^	_glowball, _target, _worldLayer, _paddlersnout, _paddlerretina,$/;"	e	enum:objecttypes
_xlisp_node	vars-standalone.h	/^	_xlisp_node,$/;"	e	enum:objecttypes
abnormal_rand	mxt.c	/^double abnormal_rand( double av, double stdv )$/;"	f
acosdeg	mxt.h	/^#	define acosdeg(/;"	d
add_ascanf_functions	varsA.c	/^int add_ascanf_functions( ascanf_Function *array, int n)$/;"	f
add_exit_line	varsV.c	/^int add_exit_line( v, N, i, C)$/;"	f
add_var	varsV.c	/^long add_var( var, operand, operands, count)$/;"	f
add_watch_command	varsV.c	/^int add_watch_command( Variable_t *v, long N, long n, long C)$/;"	f
add_watch_variable	varsV.c	/^int add_watch_variable( v, N, n, C)$/;"	f
addr_printing	SymbolTable.h	/^	#define addr_printing	/;"	d
address	SymbolTable.h	/^	pointer address;$/;"	m	struct:SymbolTable_List
address_symbol	vars-standalone.c	/^char *address_symbol(pointer x)$/;"	f
adr	SymbolTable.h	/^	pointer adr;			\/* the synonym-pointer	*\/$/;"	m	struct:syno
adr	SymbolTable.h	/^	pointer adr;$/;"	m	struct:SymbolTable
alarm_method	vars-standalone.c	/^static int_method alarm_method= NULL;$/;"	v	file:
alloc_exit_lines	varsV.c	/^int alloc_exit_lines( v, n, I, C)$/;"	f
alloc_len	varsedit.h	/^	long _cnt, _base, _tlen, alloc_len;$/;"	m	struct:string
alloca	ALLOCA.h	/^#	define alloca(/;"	d
alloca	ALLOCA.h	/^#	undef alloca$/;"	d
alpha_var_sort	varsV.c	/^int alpha_var_sort( a, b)$/;"	f
arg	varsA.c	/^double arg( x, y)$/;"	f
args	varsedit.h	/^	int args;$/;"	m	struct:ascanf_Function
ascanf	varsA.c	/^int ascanf( type, n, s, a, ch)$/;"	f
ascanf_Eprint	varsA.c	/^int ascanf_Eprint( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_Function	varsedit.h	/^typedef struct ascanf_Function{$/;"	s
ascanf_Function	varsedit.h	/^} ascanf_Function;$/;"	t	typeref:struct:ascanf_Function
ascanf_FunctionList	varsA.c	/^}, *ascanf_FunctionList= vars_ascanf_Functions;$/;"	v
ascanf_Function_method	varsedit.h	/^typedef int (*ascanf_Function_method)(double args[ASCANF_MAX_ARGS],double *result);$/;"	t
ascanf_Function_type	varsedit.h	/^typedef enum ascanf_Function_type { NOT_EOF , NOT_EOF_OR_RETURN } ascanf_Function_type;$/;"	g
ascanf_Function_type	varsedit.h	/^typedef enum ascanf_Function_type { NOT_EOF , NOT_EOF_OR_RETURN } ascanf_Function_type;$/;"	t	typeref:enum:ascanf_Function_type
ascanf_Functions	varsA.c	/^int ascanf_Functions= sizeof(vars_ascanf_Functions)\/sizeof(ascanf_Function);$/;"	v
ascanf_Index	varsA.c	/^int ascanf_Index( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_SS	varsA.c	/^SimpleStats ascanf_SS[ASCANF_MAX_ARGS];$/;"	v
ascanf_SS_Count	varsA.c	/^int ascanf_SS_Count( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_SS_Mean	varsA.c	/^int ascanf_SS_Mean( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_SS_St_Dev	varsA.c	/^int ascanf_SS_St_Dev( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_SS_WeightSum	varsA.c	/^int ascanf_SS_WeightSum( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_SS_get	varsA.c	/^int ascanf_SS_get( double args[ASCANF_MAX_ARGS], double *result, int what )$/;"	f
ascanf_SS_max	varsA.c	/^int ascanf_SS_max( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_SS_min	varsA.c	/^int ascanf_SS_min( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_SS_pos_min	varsA.c	/^int ascanf_SS_pos_min( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_SS_set	varsA.c	/^int ascanf_SS_set( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_abnormal	varsA.c	/^int ascanf_abnormal( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_abs	varsA.c	/^int ascanf_abs( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_add	varsA.c	/^int ascanf_add( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_and	varsA.c	/^int ascanf_and( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_arg	varsA.c	/^int ascanf_arg( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_arg_error	varsA.c	/^int ascanf_arguments, ascanf_arg_error, ascanf_verbose= 1;$/;"	v
ascanf_arguments	varsA.c	/^int ascanf_arguments, ascanf_arg_error, ascanf_verbose= 1;$/;"	v
ascanf_atan2	varsA.c	/^int ascanf_atan2( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_ceil	varsA.c	/^int ascanf_ceil( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_clip	varsA.c	/^int ascanf_clip( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_compress	varsA.c	/^int ascanf_compress( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_continue	varsA.c	/^static int ascanf_continue= 0;$/;"	v	file:
ascanf_continue_	varsA.c	/^void ascanf_continue_( int sig )$/;"	f
ascanf_conv_angle	varsA.c	/^int ascanf_conv_angle( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_cos	varsA.c	/^int ascanf_cos( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_current	varsA.c	/^int ascanf_current( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_current_value	varsA.c	/^double ascanf_self_value, ascanf_current_value, ascanf_index_value, ascanf_memory[ASCANF_MAX_ARGS], ascanf_progn_return;$/;"	v
ascanf_dcmp	varsA.c	/^int ascanf_dcmp( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_degrees	varsA.c	/^int ascanf_degrees( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_delta_t	varsA.c	/^double ascanf_delta_t= 0.01;$/;"	v
ascanf_div	varsA.c	/^int ascanf_div( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_dowhile	varsA.c	/^int ascanf_dowhile( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_elapsed	varsA.c	/^int ascanf_elapsed( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_eq	varsA.c	/^int ascanf_eq( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_erf	varsA.c	/^int ascanf_erf( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_erfc	varsA.c	/^int ascanf_erfc( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_escape	varsA.c	/^int ascanf_escape= False;$/;"	v
ascanf_exp	varsA.c	/^int ascanf_exp( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_fac	varsA.c	/^int ascanf_fac( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_floor	varsA.c	/^int ascanf_floor( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_fmod	varsA.c	/^int ascanf_fmod( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_for_to	varsA.c	/^int ascanf_for_to( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_function	varsA.c	/^int ascanf_function( ascanf_Function *Function, int Index, char **s, int ind, double *A, char *caller)$/;"	f
ascanf_ge	varsA.c	/^int ascanf_ge( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_gt	varsA.c	/^int ascanf_gt( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_hash	varsA.c	/^long ascanf_hash( name)$/;"	f
ascanf_if	varsA.c	/^int ascanf_if( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_if2	varsA.c	/^int ascanf_if2( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_index	varsA.c	/^char *ascanf_index( char *s, char c)$/;"	f
ascanf_index_value	varsA.c	/^double ascanf_self_value, ascanf_current_value, ascanf_index_value, ascanf_memory[ASCANF_MAX_ARGS], ascanf_progn_return;$/;"	v
ascanf_le	varsA.c	/^int ascanf_le( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_len	varsA.c	/^int ascanf_len( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_log	varsA.c	/^int ascanf_log( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_loop	varsA.c	/^static int ascanf_loop= 0, *ascanf_loop_ptr= &ascanf_loop;$/;"	v	file:
ascanf_loop_ptr	varsA.c	/^static int ascanf_loop= 0, *ascanf_loop_ptr= &ascanf_loop;$/;"	v	file:
ascanf_lowpass	varsA.c	/^int ascanf_lowpass( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_lt	varsA.c	/^int ascanf_lt( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_matherr_fnc	varsA.c	/^int ascanf_matherr_fnc( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_max	varsA.c	/^int ascanf_max( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_mem	varsA.c	/^int ascanf_mem( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_memory	varsA.c	/^double ascanf_self_value, ascanf_current_value, ascanf_index_value, ascanf_memory[ASCANF_MAX_ARGS], ascanf_progn_return;$/;"	v
ascanf_min	varsA.c	/^int ascanf_min( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_misc_fun	varsA.c	/^int ascanf_misc_fun( double args[ASCANF_MAX_ARGS], double *result, int code, int argc )$/;"	f
ascanf_mod_angle	varsA.c	/^int ascanf_mod_angle( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_mul	varsA.c	/^int ascanf_mul( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_mxy	varsA.c	/^int ascanf_mxy( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_mxy_X	varsA.c	/^int ascanf_mxy_X= 0, ascanf_mxy_Y= 0;$/;"	v
ascanf_mxy_Y	varsA.c	/^int ascanf_mxy_X= 0, ascanf_mxy_Y= 0;$/;"	v
ascanf_mxy_buf	varsA.c	/^double **ascanf_mxy_buf;$/;"	v
ascanf_nlowpass	varsA.c	/^int ascanf_nlowpass( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_normal	varsA.c	/^int ascanf_normal( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_not	varsA.c	/^int ascanf_not( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_or	varsA.c	/^int ascanf_or( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_pi	varsA.c	/^int ascanf_pi( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_pow	varsA.c	/^int ascanf_pow( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_print	varsA.c	/^int ascanf_print( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_progn	varsA.c	/^int ascanf_progn( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_progn_return	varsA.c	/^double ascanf_self_value, ascanf_current_value, ascanf_index_value, ascanf_memory[ASCANF_MAX_ARGS], ascanf_progn_return;$/;"	v
ascanf_radians	varsA.c	/^int ascanf_radians( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_random	varsA.c	/^int ascanf_random( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_random_select	varsA.c	/^int ascanf_random_select( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_return	varsA.c	/^int ascanf_return( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_self	varsA.c	/^int ascanf_self( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_self_value	varsA.c	/^double ascanf_self_value, ascanf_current_value, ascanf_index_value, ascanf_memory[ASCANF_MAX_ARGS], ascanf_progn_return;$/;"	v
ascanf_separator	varsA.c	/^char ascanf_separator= ',';$/;"	v
ascanf_set_interval	varsA.c	/^int ascanf_set_interval( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_setmxy	varsA.c	/^int ascanf_setmxy( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_shunt	varsA.c	/^int ascanf_shunt( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_sin	varsA.c	/^int ascanf_sin( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_sleep_once	varsA.c	/^int ascanf_sleep_once( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_sub	varsA.c	/^int ascanf_sub( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_tan	varsA.c	/^int ascanf_tan( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_time	varsA.c	/^int ascanf_time( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_uniform	varsA.c	/^int ascanf_uniform( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
ascanf_verbose	varsA.c	/^int ascanf_arguments, ascanf_arg_error, ascanf_verbose= 1;$/;"	v
ascanf_verbose_fnc	varsA.c	/^int ascanf_verbose_fnc( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_whiledo	varsA.c	/^int ascanf_whiledo( double args[ASCANF_MAX_ARGS], double *result )$/;"	f
ascanf_xor	varsA.c	/^int ascanf_xor( double args[ASCANF_MAX_ARGS], double *result)$/;"	f
asindeg	mxt.h	/^#	define asindeg(/;"	d
atan3	mxt.c	/^double atan3( dy, dx)$/;"	f
atandeg	mxt.h	/^#	define atandeg(/;"	d
atexit_handler	vars-standalone.c	/^static void atexit_handler()$/;"	f	file:
badpat	regex.c	/^#define badpat(/;"	d	file:
behaviour	varsedit.h	/^	SincString behaviour;$/;"	m	struct:string
belll	mxt.c	/^char belll[]= { 0x07, 0x00};$/;"	v
big	sincos.c	/^#define	big	/;"	d	file:
bignum	cpu.h	/^typedef long bignum;$/;"	t
bittab	regex.c	/^static CHAR bittab[BITBLK];		\/* bit table for CCL *\/$/;"	v	file:
blockwave	mxt.c	/^int blockwave( x, l)$/;"	f
bol	regex.c	/^static char *bol;$/;"	v	file:
bopat	regex.c	/^static char *bopat[MAXTAG];$/;"	v	file:
buf	varsV.c	/^	char *buf;$/;"	m	struct:Watch_Variable	file:
c	varsedit.h	/^	char *c, **cp;			\/* a byte	*\/$/;"	m	union:variabletype
c	varsedit.h	/^	char c, *cp;			\/* a byte	*\/$/;"	m	union:variableset
c_v_PARENT_check	varsV.c	/^int c_v_on_NULLptr= 1, c_v_on_PARENT_notify= 1, c_v_PARENT_check= 1, c_v_correct_ID= 0, c_v_on_NULLelement= 0;$/;"	v
c_v_PARENT_check_default	varsV.c	/^int c_v_on_NULLptr_default= 1, c_v_on_PARENT_notify_default= 1, c_v_PARENT_check_default= 1, c_v_correct_ID_default= 0, c_v_on_NULLelement_default= 0;$/;"	v
c_v_Pars	varsV.c	/^static Variable c_v_Pars[]={$/;"	v	file:
c_v_correct_ID	varsV.c	/^int c_v_on_NULLptr= 1, c_v_on_PARENT_notify= 1, c_v_PARENT_check= 1, c_v_correct_ID= 0, c_v_on_NULLelement= 0;$/;"	v
c_v_correct_ID_default	varsV.c	/^int c_v_on_NULLptr_default= 1, c_v_on_PARENT_notify_default= 1, c_v_PARENT_check_default= 1, c_v_correct_ID_default= 0, c_v_on_NULLelement_default= 0;$/;"	v
c_v_on_NULLelement	varsV.c	/^int c_v_on_NULLptr= 1, c_v_on_PARENT_notify= 1, c_v_PARENT_check= 1, c_v_correct_ID= 0, c_v_on_NULLelement= 0;$/;"	v
c_v_on_NULLelement_default	varsV.c	/^int c_v_on_NULLptr_default= 1, c_v_on_PARENT_notify_default= 1, c_v_PARENT_check_default= 1, c_v_correct_ID_default= 0, c_v_on_NULLelement_default= 0;$/;"	v
c_v_on_NULLptr	varsV.c	/^int c_v_on_NULLptr= 1, c_v_on_PARENT_notify= 1, c_v_PARENT_check= 1, c_v_correct_ID= 0, c_v_on_NULLelement= 0;$/;"	v
c_v_on_NULLptr_default	varsV.c	/^int c_v_on_NULLptr_default= 1, c_v_on_PARENT_notify_default= 1, c_v_PARENT_check_default= 1, c_v_correct_ID_default= 0, c_v_on_NULLelement_default= 0;$/;"	v
c_v_on_PARENT_notify	varsV.c	/^int c_v_on_NULLptr= 1, c_v_on_PARENT_notify= 1, c_v_PARENT_check= 1, c_v_correct_ID= 0, c_v_on_NULLelement= 0;$/;"	v
c_v_on_PARENT_notify_default	varsV.c	/^int c_v_on_NULLptr_default= 1, c_v_on_PARENT_notify_default= 1, c_v_PARENT_check_default= 1, c_v_correct_ID_default= 0, c_v_on_NULLelement_default= 0;$/;"	v
calendar	vars-standalone.c	/^void calendar(FILE *strm, char *s)$/;"	f
call_alarm_call	vars-standalone.c	/^void call_alarm_call( int action )$/;"	f
calloc	vars-standalone.c	/^#define calloc /;"	d	file:
calloc	vars-standalone.c	/^#undef calloc$/;"	d	file:
calloc	vars-standalone.h	/^#	define calloc(/;"	d
calloc2d_error	Macros.h	/^#define calloc2d_error(/;"	d
calloc3d_error	Macros.h	/^#define calloc3d_error(/;"	d
calloc4d_error	Macros.h	/^#define calloc4d_error(/;"	d
calloc_error	Macros.h	/^#define calloc_error(/;"	d
calloc_size	vars-standalone.c	/^unsigned long calloc_size= 0L;$/;"	v
car	vars-standalone.h	/^	pointer car;$/;"	m	struct:disposable
cascanf	varsA.c	/^int cascanf( int *n, char *s, char *a, char *ch)$/;"	f
cctime	vars-standalone.h	/^	char file[TRACENAMELENGTH], cctime[TRACENAMELENGTH], func[TRACENAMELENGTH];$/;"	m	struct:cx_trace_stack_item
cdr	SymbolTable.h	/^	struct SymbolTable *cdr;$/;"	m	struct:SymbolTable	typeref:struct:SymbolTable::SymbolTable
cdr	SymbolTable.h	/^	struct SymbolTable *cdr;$/;"	m	struct:syno	typeref:struct:syno::SymbolTable
cdr	vars-standalone.h	/^	struct disposable *head, *cdr;$/;"	m	struct:disposable	typeref:struct:disposable::
cdr	varsedit.h	/^	struct ascanf_Function *cdr;$/;"	m	struct:ascanf_Function	typeref:struct:ascanf_Function::ascanf_Function
change_stdin	vars-standalone.c	/^int change_stdin( char *newfile, FILE *errfile)$/;"	f
change_stdout_stderr	vars-standalone.c	/^int change_stdout_stderr( char *newfile, FILE *errfile)$/;"	f
char_Variable	varsedit.h	/^typedef struct char_Variable{$/;"	s
char_Variable	varsedit.h	/^} char_Variable;$/;"	t	typeref:struct:char_Variable
char_method	Macros.h	/^typedef char (*char_method)();$/;"	t
charp_Variable	varsedit.h	/^typedef struct charp_Variable{$/;"	s
charp_Variable	varsedit.h	/^} charp_Variable;$/;"	t	typeref:struct:charp_Variable
check_alloca_size	ALLOCA.h	/^static size_t check_alloca_size(size_t n, size_t s, size_t max, char *file, int lineno )$/;"	f
check_for_ascanf_function	varsA.c	/^int check_for_ascanf_function( int Index, char **s, double *result, int *ok, char *caller)$/;"	f
check_vars	varsV.c	/^RET_SHORT check_vars( vars, n, fp)$/;"	f
check_vars_caller	varsV.c	/^char *check_vars_caller= NULL;$/;"	v
check_vars_low_errormsg	varsV.c	/^check_vars_low_errormsg( FILE *fp, char *cvc, int line, Variable_t *Vars, Variable_t *vars)$/;"	f
check_vars_reset	varsV.c	/^RET_SHORT check_vars_reset( Variable_t *vars, long n, FILE *fp)$/;"	f
chrtyp	regex.c	/^static char chrtyp[MAXCHR] = {$/;"	v	file:
chset	regex.c	/^chset(c) REGISTER CHAR c; { bittab[((c)&BLKIND)>>3] |= 1<<((c)&BITIND); }$/;"	f	file:
code	vars-standalone.c	/^	int (*code)();				\/* exit method, called if result== 0	*\/$/;"	m	struct:exit_code	file:
command	varsedit.h	/^	VariableChange_method command;$/;"	m	union:variableset
command	varsedit.h	/^	VariableChange_method command;$/;"	m	union:variabletype
concat	vars-standalone.c	/^char *concat( char *a, char *b, ...)$/;"	f
concat	vars-standalone.c	/^char *concat(char *first, ...)$/;"	f
concat2	vars-standalone.c	/^char *concat2( char *a, char *b, ...)$/;"	f
concat2	vars-standalone.c	/^char *concat2(char *string, ...)$/;"	f
concat_Variables	varsV.c	/^Variable_t *concat_Variables( long *length, long N, ... )$/;"	f
concat_Variables_with_description	varsV.c	/^DescribedVariable *concat_Variables_with_description( long *length, Variable_t *Var, ... )$/;"	f
concat_Variables_with_description2	varsV.c	/^DescribedVariable *concat_Variables_with_description2( long *length, DescribedVariable2 *Var, ... )$/;"	f
condition	vars-standalone.c	/^		condition,			\/* exit code for calling this code	*\/$/;"	m	struct:exit_code	file:
conv_angle	mxt.c	/^double conv_angle( phi)$/;"	f
conv_angle2	mxt.c	/^double conv_angle2( phi)$/;"	f
conv_angle_	mxt.c	/^double conv_angle_( phi, base)$/;"	f
cook_string	varsP.c	/^long cook_string(d, s, count, do_comments )$/;"	f
cos_ps	sse_mathfun.h	/^static inline v4sf cos_ps(v4sf x)$/;"	f
cosdeg	mxt.h	/^#	define cosdeg(/;"	d
cosinus	mxt.c	/^double cosinus(x, l)$/;"	f
count	mxt.h	/^	unsigned long count, last_count, takes;$/;"	m	struct:simplestats
cp	varsedit.h	/^	char *c, **cp;			\/* a byte	*\/$/;"	m	union:variabletype
cp	varsedit.h	/^	char c, *cp;			\/* a byte	*\/$/;"	m	union:variableset
curt	mxt.c	/^double curt(x)$/;"	f
cx_stderr	vars-standalone.h	/^#define cx_stderr	/;"	d
cx_sys_errlist	vars-standalone.c	/^char *cx_sys_errlist[]= {					\/* sys_nerr+ ...	*\/$/;"	v
cx_sys_nerr	vars-standalone.c	/^int cx_sys_nerr= sizeof(cx_sys_errlist)\/sizeof(char*);$/;"	v
cx_trace_stack_item	vars-standalone.h	/^typedef struct cx_trace_stack_item{$/;"	s
cxcos	sincos.c	/^double cxcos( double x, double base )$/;"	f
cxsin	sincos.c	/^double cxsin( double x, double base )$/;"	f
cxsincos	sincos.c	/^void cxsincos( double x, double base, double *sr, double *cr )$/;"	f
d	NaN.h	/^	double d;$/;"	m	union:IEEEfp
d	mxt.h	/^	double d;$/;"	m	union:IEEEfp
d	varsedit.h	/^	double *d, **dp;		\/* floating point	*\/$/;"	m	union:variabletype
d	varsedit.h	/^	double d, *dp;			\/* floating point	*\/$/;"	m	union:variableset
d2int	varsA.c	/^int d2int( x)$/;"	f
d2long	varsA.c	/^long d2long( x)$/;"	f
d2short	varsA.c	/^short d2short(x)$/;"	f
d2str	mxt.c	/^char *d2str( double d, char *Format , char *buf )$/;"	f
d2str_factors	mxt.c	/^	*d2str_factors= _d2str_factors;$/;"	v
dascanf	varsA.c	/^int dascanf( n, s, a, ch)$/;"	f
dcmp	mxt.c	/^double dcmp( double b, double a, double prec)$/;"	f
default_args	varsedit.h	/^	char *default_args;$/;"	m	struct:DescribedVariable
default_args	varsedit.h	/^	char *default_args;$/;"	m	struct:DescribedVariable2
degrees	Macros.h	/^#define degrees(/;"	d
degrees	varsA.c	/^#	define degrees(/;"	d	file:
delete_watch_variable	varsV.c	/^int delete_watch_variable( v, N, i, C)$/;"	f
delta_t	mxt.h	/^	double *tau, *delta_t, memory;$/;"	m	struct:leaky_int_par
depth	vars-standalone.h	/^	int depth, line;$/;"	m	struct:cx_trace_stack_item
description	SymbolTable.h	/^	char *description;$/;"	m	struct:SymbolTable
description	SymbolTable.h	/^	char *description;$/;"	m	struct:SymbolTable_List
description	SymbolTable.h	/^	char *description;$/;"	m	struct:syno
description	varsedit.h	/^	char *description;$/;"	m	struct:DescribedVariable
description	varsedit.h	/^	char *description;$/;"	m	struct:DescribedVariable2
dfa	regex.c	/^static CHAR dfa[MAXDFA];		\/* automaton..       *\/$/;"	v	file:
dfac	mxt.c	/^double dfac( x, dx)$/;"	f
discard_after	varsV.c	/^char *discard_after( char *buffer, char *discard)$/;"	f
disposable	vars-standalone.h	/^typedef struct disposable{	$/;"	s
divide_var	varsV.c	/^long divide_var( var, operand, operands, count)$/;"	f
do_command_var	varsV.c	/^static int do_command_var( var, vars, n, p, J, errfp)$/;"	f	file:
do_vars_exit_lines	varsV.c	/^int do_vars_exit_lines(int val)$/;"	f
double_Variable	varsedit.h	/^typedef struct double_Variable{$/;"	s
double_Variable	varsedit.h	/^} double_Variable;$/;"	t	typeref:struct:double_Variable
double_method	Macros.h	/^typedef double (*double_method)();$/;"	t
double_print_format	varsV.c	/^char double_print_format[16]= "%g";$/;"	v
doublep_Variable	varsedit.h	/^typedef struct doublep_Variable{$/;"	s
doublep_Variable	varsedit.h	/^} doublep_Variable;$/;"	t	typeref:struct:doublep_Variable
dp	varsedit.h	/^	double *d, **dp;		\/* floating point	*\/$/;"	m	union:variabletype
dp	varsedit.h	/^	double d, *dp;			\/* floating point	*\/$/;"	m	union:variableset
drand	mxt.h	/^#define drand(/;"	d
dsign	mxt.h	/^#define dsign(/;"	d
dup_Parfile_Context	varsP.c	/^Parfile_Context *dup_Parfile_Context( pc, fp, fname)$/;"	f
e	NaN.h	/^		uint32 e:11;$/;"	m	struct:IEEEfp::__anon4
e	NaN.h	/^		uint32 e:11;$/;"	m	struct:IEEEfp::__anon8
e	NaN.h	/^		uint32 e:8;$/;"	m	struct:IEEEsfp::__anon2
e	NaN.h	/^		uint32 e:8;$/;"	m	struct:IEEEsfp::__anon6
e	mxt.h	/^		unsigned e:11;$/;"	m	struct:IEEEfp::__anon12
e	mxt.h	/^		unsigned e:11;$/;"	m	struct:IEEEfp::__anon16
e	mxt.h	/^		unsigned e:8;$/;"	m	struct:IEEEsfp::__anon10
e	mxt.h	/^		unsigned e:8;$/;"	m	struct:IEEEsfp::__anon14
edit_input	varsV.c	/^char *edit_input( int level, char *prompt, char *buffer, int len, int *nlines, FILE **Fp, FILE *verrfile)$/;"	f
edit_variables	varsedit.h	/^#define edit_variables(/;"	d
edit_variables_interim	varsedit.h	/^#define edit_variables_interim	/;"	d
edit_variables_linesread	varsV.c	/^int edit_variables_maxlines= -1, *edit_variables_linesread= NULL;$/;"	v
edit_variables_list	varsV.c	/^RET_SHORT edit_variables_list( char *prompt, long n, ... )$/;"	f
edit_variables_list_interim	varsV.c	/^char *edit_variables_list_interim= NULL;$/;"	v
edit_variables_maxlines	varsV.c	/^int edit_variables_maxlines= -1, *edit_variables_linesread= NULL;$/;"	v
edit_vars_arglist	varsV.c	/^RET_SHORT edit_vars_arglist( char *prompt )$/;"	f
eopat	regex.c	/^static char *eopat[MAXTAG];$/;"	v	file:
execute_command_question	varsV.c	/^int execute_command_question= 0;$/;"	v
exit_code	vars-standalone.c	/^typedef struct exit_code{$/;"	s	file:
exp_ps	sse_mathfun.h	/^static inline v4sf exp_ps(v4sf x)$/;"	f
f	NaN.h	/^		uint32 f:23;$/;"	m	struct:IEEEsfp::__anon2
f	NaN.h	/^		uint32 f:23;$/;"	m	struct:IEEEsfp::__anon6
f	NaN.h	/^	float f;$/;"	m	union:IEEEsfp
f	mxt.h	/^		unsigned f:23;$/;"	m	struct:IEEEsfp::__anon10
f	mxt.h	/^		unsigned f:23;$/;"	m	struct:IEEEsfp::__anon14
f	mxt.h	/^	float f;$/;"	m	union:IEEEsfp
f	varsedit.h	/^	float *f, **fp;$/;"	m	union:variabletype
f	varsedit.h	/^	float f, *fp;$/;"	m	union:variableset
f1	NaN.h	/^		uint32 f1:20, f2:32;$/;"	m	struct:IEEEfp::__anon8
f1	NaN.h	/^		uint32 f2:32,f1:20;$/;"	m	struct:IEEEfp::__anon4
f1	mxt.h	/^		unsigned f1:20, f2:32;$/;"	m	struct:IEEEfp::__anon16
f1	mxt.h	/^		unsigned f1:32,f2:20;$/;"	m	struct:IEEEfp::__anon12
f2	NaN.h	/^		uint32 f1:20, f2:32;$/;"	m	struct:IEEEfp::__anon8
f2	NaN.h	/^		uint32 f2:32,f1:20;$/;"	m	struct:IEEEfp::__anon4
f2	mxt.h	/^		unsigned f1:20, f2:32;$/;"	m	struct:IEEEfp::__anon16
f2	mxt.h	/^		unsigned f1:32,f2:20;$/;"	m	struct:IEEEfp::__anon12
fascanf	varsA.c	/^int fascanf( n, s, a, ch)$/;"	f
fgets	varsintr.h	/^#	define fgets /;"	d
file	vars-standalone.h	/^	char file[TRACENAMELENGTH], cctime[TRACENAMELENGTH], func[TRACENAMELENGTH];$/;"	m	struct:cx_trace_stack_item
file	varsedit.h	/^		FILE *file;$/;"	m	union:string::file_or_string
file_or_string	varsedit.h	/^	union file_or_string{$/;"	u	struct:string
fillstr	vars-standalone.c	/^void fillstr(char *a, int b)		\/* fill a with b *\/$/;"	f
find_balanced	varsA.c	/^char *find_balanced( char *arg_buf, const char match, const char brace_left, const char brace_right, int *escaped )$/;"	f
find_d2str_factor	mxt.c	/^static int find_d2str_factor( double d, int *DF, int scale)$/;"	f	file:
find_named_VariableSelection	varsV.c	/^Variable_t *find_named_VariableSelection( name, XVariables, MaxXVariables, I, J, vsret)$/;"	f
find_named_var	varsV.c	/^Variable_t *find_named_var( _name, exact, vars, n, I, errfp)$/;"	f
find_next_named_var	varsV.c	/^static Variable_t *find_next_named_var( buf, vars, n, I, place_in_buf, match, option, errfp)$/;"	f	file:
find_next_regex_var	varsV.c	/^static Variable_t *find_next_regex_var( buf, vars, n, I, place_in_buf, match, option, errfp)$/;"	f	file:
find_var	varsV.c	/^Variable_t *find_var( ptr, vars, n, I, errfp)$/;"	f
fixnum	cpu.h	/^typedef short fixnum;$/;"	t
flag	SymbolTable.h	/^	char log_it, flag;$/;"	m	struct:SymbolTable
flag	SymbolTable.h	/^	char log_it, flag;$/;"	m	struct:syno
flag	SymbolTable.h	/^	int size, flag;$/;"	m	struct:SymbolTable_List
flags	varsedit.h	/^	char *flags;$/;"	m	struct:var_changed_field
flonum	cpu.h	/^typedef double	flonum;$/;"	t
fmod	mxt.c	/^double fmod( x, y)$/;"	f
fp	varsedit.h	/^	float *f, **fp;$/;"	m	union:variabletype
fp	varsedit.h	/^	float f, *fp;$/;"	m	union:variableset
fpINF	NaN.h	/^#define fpINF(/;"	d
fpINF	mxt.h	/^#define fpINF(/;"	d
fpInf	NaN.h	/^#define fpInf(/;"	d
fpInf	mxt.h	/^#define fpInf(/;"	d
fpNaN	NaN.h	/^#define fpNaN(/;"	d
fpNaN	mxt.h	/^#define fpNaN(/;"	d
fpNaNorInf	NaN.h	/^#define fpNaNorInf(/;"	d
fpNaNorInf	mxt.h	/^#define fpNaNorInf(/;"	d
fprint_array	varsV.c	/^RET_SHORT fprint_array( FILE *fp, TypeOfVariable type, int len, pointer data)$/;"	f
fprint_var	varsV.c	/^RET_SHORT fprint_var( fp, var, addr)$/;"	f
fprint_varMean	varsV.c	/^RET_SHORT fprint_varMean( fp, var)$/;"	f
fraxion	mxt.c	/^double fraxion( x)$/;"	f
free	vars-standalone.c	/^#define free /;"	d	file:
free	vars-standalone.c	/^#undef free$/;"	d	file:
free	vars-standalone.h	/^#	define free(/;"	d
free_ascanf_mxy_buf	varsA.c	/^int free_ascanf_mxy_buf()$/;"	f
free_sintab	mxt.c	/^void free_sintab()$/;"	f
func	vars-standalone.h	/^	char file[TRACENAMELENGTH], cctime[TRACENAMELENGTH], func[TRACENAMELENGTH];$/;"	m	struct:cx_trace_stack_item
function	varsedit.h	/^	ascanf_Function_method function;$/;"	m	struct:ascanf_Function
get_lowlevel_time	lowlevel_timer.h	/^#	define get_lowlevel_time(/;"	d
get_lowlevel_time2	lowlevel_timer.h	/^#	define get_lowlevel_time2(/;"	d
getenv	vars-standalone.c	/^#undef getenv$/;"	d	file:
getenv	vars-standalone.h	/^#define getenv(/;"	d
give_evl_help	varsV.c	/^give_evl_help( prompt, efp)$/;"	f
hPI	mxt.h	/^#define hPI /;"	d
half	sincos.c	/^#define half	/;"	d	file:
hash	SymbolTable.h	/^	long hash;$/;"	m	struct:SymbolTable
hash	varsedit.h	/^	long hash;$/;"	m	struct:ascanf_Function
head	vars-standalone.h	/^	struct disposable *head, *cdr;$/;"	m	struct:disposable	typeref:struct:disposable::disposable
hfascanf	varsA.c	/^int hfascanf( n, s, a, ch)$/;"	f
high	NaN.h	/^		int16 high, low;$/;"	m	struct:IEEEsfp::__anon5
high	NaN.h	/^		int16 low, high;$/;"	m	struct:IEEEsfp::__anon1
high	NaN.h	/^		int32 high, low;$/;"	m	struct:IEEEfp::__anon7
high	NaN.h	/^		int32 low, high;$/;"	m	struct:IEEEfp::__anon3
high	mxt.h	/^		long high, low;$/;"	m	struct:IEEEfp::__anon15
high	mxt.h	/^		long low, high;$/;"	m	struct:IEEEfp::__anon11
high	mxt.h	/^		short high, low;$/;"	m	struct:IEEEsfp::__anon13
high	mxt.h	/^		short low, high;$/;"	m	struct:IEEEsfp::__anon9
i	varsedit.h	/^	int *i, **ip;			\/* 16 OR 32 bits!	*\/$/;"	m	union:variabletype
i	varsedit.h	/^	int i, *ip;			\/* 16 OR 32 bits!	*\/$/;"	m	union:variableset
i386	win32.h	/^#	define i386$/;"	d
id	vars-standalone.h	/^	long id;$/;"	m	struct:disposable
id	varsedit.h	/^	int id;$/;"	m	struct:DescribedVariable2
id	varsedit.h	/^	int id;$/;"	m	struct:variableselection
impulse	mxt.c	/^int impulse( x, l, tol)$/;"	f
in_var_var	varsV.c	/^Variable_t *in_var_var( Variable_t *var_var, Variable_t *var)$/;"	f
inascii	regex.c	/^#define inascii(/;"	d	file:
index	win32.h	/^#define	index(/;"	d
init_RootPointer	vars-standalone.c	/^pointer init_RootPointer( char *q, int n, int itemsize, unsigned long size, int EnterDisposable )$/;"	f
init_lowlevel_time	lowlevel_timer.c	/^int init_lowlevel_time()$/;"	f
inline	sse_mathfun.h	/^# define inline	/;"	d
int16	64typedefs.h	/^	typedef short int16;$/;"	t
int32	64typedefs.h	/^	typedef int int32;$/;"	t
int32	64typedefs.h	/^	typedef long int32;$/;"	t
int64	64typedefs.h	/^	typedef long int64;$/;"	t
int64	64typedefs.h	/^	typedef long long int64;$/;"	t
int_Variable	varsedit.h	/^typedef struct int_Variable{$/;"	s
int_Variable	varsedit.h	/^} int_Variable;$/;"	t	typeref:struct:int_Variable
int_method	Macros.h	/^	typedef int (*int_method)();$/;"	t
internal_error	regex.c	/^static int  internal_error;$/;"	v	file:
intp_Variable	varsedit.h	/^typedef struct intp_Variable{$/;"	s
intp_Variable	varsedit.h	/^} intp_Variable;$/;"	t	typeref:struct:intp_Variable
ip	varsedit.h	/^	int *i, **ip;			\/* 16 OR 32 bits!	*\/$/;"	m	union:variabletype
ip	varsedit.h	/^	int i, *ip;			\/* 16 OR 32 bits!	*\/$/;"	m	union:variableset
isNaN	NaN.h	/^#define isNaN(/;"	d
isfpNaN	NaN.h	/^#define isfpNaN(/;"	d
isinset	regex.c	/^#define isinset(/;"	d	file:
iswordc	regex.c	/^#define iswordc(/;"	d	file:
item	SymbolTable.h	/^	long Index, item;$/;"	m	struct:SymbolTable
item	SymbolTable.h	/^	unsigned Index, item;$/;"	m	struct:syno
item_len	vars-standalone.h	/^	unsigned long item_len, item_nr;$/;"	m	struct:Remember
item_nr	vars-standalone.h	/^	unsigned long item_len, item_nr;$/;"	m	struct:Remember
items	vars-standalone.h	/^	int items;$/;"	m	struct:Remember
key_name	regex.c	/^char key_name[][4]= { "END", "CHR", "ANY", "CCL", "NCL", "BOL", "EOL", "BOT",$/;"	v
l	NaN.h	/^	} l;$/;"	m	union:IEEEfp	typeref:struct:IEEEfp::__anon3
l	NaN.h	/^	} l;$/;"	m	union:IEEEfp	typeref:struct:IEEEfp::__anon7
l	NaN.h	/^	} l;$/;"	m	union:IEEEsfp	typeref:struct:IEEEsfp::__anon1
l	NaN.h	/^	} l;$/;"	m	union:IEEEsfp	typeref:struct:IEEEsfp::__anon5
l	mxt.h	/^	} l;$/;"	m	union:IEEEfp	typeref:struct:IEEEfp::__anon11
l	mxt.h	/^	} l;$/;"	m	union:IEEEfp	typeref:struct:IEEEfp::__anon15
l	mxt.h	/^	} l;$/;"	m	union:IEEEsfp	typeref:struct:IEEEsfp::__anon13
l	mxt.h	/^	} l;$/;"	m	union:IEEEsfp	typeref:struct:IEEEsfp::__anon9
l	varsedit.h	/^	long *l, **lp;			\/* 32 OR 64 bits; also used for pointers	*\/$/;"	m	union:variabletype
l	varsedit.h	/^	long l, *lp;			\/* 32 bits; also used for pointers	*\/$/;"	m	union:variableset
lascanf	varsA.c	/^int lascanf( n, s, a, ch)$/;"	f
last_count	mxt.h	/^	long pos_count, neg_count, last_count, takes;$/;"	m	struct:simpleanglestats
last_count	mxt.h	/^	unsigned long count, last_count, takes;$/;"	m	struct:simplestats
last_item	mxt.h	/^	double pos_weight_sum, neg_weight_sum, last_weight, pos_sum, neg_sum, sum_sqr, last_item;$/;"	m	struct:simpleanglestats
last_item	mxt.h	/^	double weight_sum, last_weight, sum, sum_sqr, sum_cub, last_item;$/;"	m	struct:simplestats
last_prompt	varsV.c	/^static char last_prompt[8]= ">> ";$/;"	v	file:
last_weight	mxt.h	/^	double pos_weight_sum, neg_weight_sum, last_weight, pos_sum, neg_sum, sum_sqr, last_item;$/;"	m	struct:simpleanglestats
last_weight	mxt.h	/^	double weight_sum, last_weight, sum, sum_sqr, sum_cub, last_item;$/;"	m	struct:simplestats
lcalloc	Macros.h	/^#define lcalloc /;"	d
lcalloc	vars-standalone.c	/^pointer lcalloc( unsigned long n, unsigned long s)$/;"	f
lcalloc	vars-standalone.h	/^#undef lcalloc$/;"	d
lcalloc2d_error	Macros.h	/^#define lcalloc2d_error /;"	d
lcalloc3d_error	Macros.h	/^#define lcalloc3d_error /;"	d
lcalloc4d_error	Macros.h	/^#define lcalloc4d_error /;"	d
lcalloc_error	Macros.h	/^#define lcalloc_error /;"	d
leaky_int_par	mxt.h	/^typedef struct leaky_int_par{$/;"	s
length_match	regex.c	/^static int length_match= 0;$/;"	v	file:
level	varsV.c	/^	int level;$/;"	m	struct:vars_Time_Struct	file:
lfree	vars-standalone.c	/^unsigned long lfree( pointer ptr)$/;"	f
lfree	vars-standalone.h	/^#undef lfree$/;"	d
lfree_alien	vars-standalone.c	/^short lfree_alien= 1, PrintRememberList_on_Exit= 0;$/;"	v
lib_calloc	vars-standalone.c	/^void *lib_calloc( size_t n, size_t s)$/;"	f
lib_free	vars-standalone.c	/^void lib_free( void *p)$/;"	f
lib_readline	varsV.c	/^void *lib_termcap= NULL, *lib_readline= NULL;$/;"	v
lib_termcap	varsV.c	/^void *lib_termcap= NULL, *lib_readline= NULL;$/;"	v
likely	Macros.h	/^#	define likely(/;"	d
line	vars-standalone.h	/^	int depth, line;$/;"	m	struct:cx_trace_stack_item
line_invocation	varsV.c	/^int line_invocation= 0;$/;"	v
linkcount	SymbolTable.h	/^	unsigned long linkcount;	\/* for xlisp	*\/$/;"	m	struct:SymbolTable
linkcount	SymbolTable.h	/^	unsigned long linkcount;$/;"	m	struct:syno
list_level	varsV.c	/^int vars_compress_controlchars= 1, vars_print_as_string=1, list_level= 0;$/;"	v
log_it	SymbolTable.h	/^	char log_it, flag;$/;"	m	struct:SymbolTable
log_it	SymbolTable.h	/^	char log_it, flag;$/;"	m	struct:syno
log_it	SymbolTable.h	/^	int log_it;$/;"	m	struct:SymbolTable_List
log_ps	sse_mathfun.h	/^static inline v4sf log_ps(v4sf x)$/;"	f
logfp	vars-standalone.h	/^#define logfp	/;"	d
long_Variable	varsedit.h	/^typedef struct long_Variable{$/;"	s
long_Variable	varsedit.h	/^} long_Variable;$/;"	t	typeref:struct:long_Variable
long_method	Macros.h	/^typedef long (*long_method)();$/;"	t
longp_Variable	varsedit.h	/^typedef struct longp_Variable{$/;"	s
longp_Variable	varsedit.h	/^} longp_Variable;$/;"	t	typeref:struct:longp_Variable
low	NaN.h	/^		int16 high, low;$/;"	m	struct:IEEEsfp::__anon5
low	NaN.h	/^		int16 low, high;$/;"	m	struct:IEEEsfp::__anon1
low	NaN.h	/^		int32 high, low;$/;"	m	struct:IEEEfp::__anon7
low	NaN.h	/^		int32 low, high;$/;"	m	struct:IEEEfp::__anon3
low	mxt.h	/^		long high, low;$/;"	m	struct:IEEEfp::__anon15
low	mxt.h	/^		long low, high;$/;"	m	struct:IEEEfp::__anon11
low	mxt.h	/^		short high, low;$/;"	m	struct:IEEEsfp::__anon13
low	mxt.h	/^		short low, high;$/;"	m	struct:IEEEsfp::__anon9
lowlevel_clock_calibrator	lowlevel_timer.c	/^double lowlevel_clock_calibrator= 1, lowlevel_clock_ticks= 0;$/;"	v
lowlevel_clock_tick	lowlevel_timer.h	/^	typedef uint64_t lowlevel_clock_tick;$/;"	t
lowlevel_clock_tick	lowlevel_timer.h	/^	typedef unsigned long long lowlevel_clock_tick;$/;"	t
lowlevel_clock_ticks	lowlevel_timer.c	/^double lowlevel_clock_calibrator= 1, lowlevel_clock_ticks= 0;$/;"	v
lp	varsedit.h	/^	long *l, **lp;			\/* 32 OR 64 bits; also used for pointers	*\/$/;"	m	union:variabletype
lp	varsedit.h	/^	long l, *lp;			\/* 32 bits; also used for pointers	*\/$/;"	m	union:variableset
lround	mxt.h	/^#define lround(/;"	d
map2d	Macros.h	/^#define map2d(/;"	d
map3d	Macros.h	/^#define map3d(/;"	d
map4d	Macros.h	/^#define map4d(/;"	d
max	mxt.h	/^	double min, max, mean, stdv, skew;$/;"	m	struct:simplestats
max	mxt.h	/^	double min, max, mean, stdv;$/;"	m	struct:simpleanglestats
maxval	varsedit.h	/^	double minval, maxval;$/;"	m	struct:DescribedVariable
maxval	varsedit.h	/^	double minval, maxval;$/;"	m	struct:DescribedVariable2
mean	mxt.h	/^	double min, max, mean, stdv, skew;$/;"	m	struct:simplestats
mean	mxt.h	/^	double min, max, mean, stdv;$/;"	m	struct:simpleanglestats
memory	mxt.h	/^	double *tau, *delta_t, memory;$/;"	m	struct:leaky_int_par
method_method	Macros.h	/^typedef pointer_method (*method_method)();$/;"	t
min	mxt.h	/^	double min, max, mean, stdv, skew;$/;"	m	struct:simplestats
min	mxt.h	/^	double min, max, mean, stdv;$/;"	m	struct:simpleanglestats
minval	varsedit.h	/^	double minval, maxval;$/;"	m	struct:DescribedVariable
minval	varsedit.h	/^	double minval, maxval;$/;"	m	struct:DescribedVariable2
mm	sse_mathfun.h	/^  __m64 mm[2];$/;"	m	union:xmm_mm_union
mm_abs_pd	sse_mathfun.h	/^static inline v2df *mm_abs_pd( v2df *val, v2df *a )$/;"	f
mm_add_pd	sse_mathfun.h	/^static inline v2df *mm_add_pd( v2df *c, v2df *a, v2df *b )$/;"	f
mm_clip_pd	sse_mathfun.h	/^static inline v2df *mm_clip_pd( v2df *val, v2df *valMin,  v2df *valMax )$/;"	f
mm_div_pd	sse_mathfun.h	/^static inline v2df *mm_div_pd( v2df *c, v2df *a, v2df *b )$/;"	f
mm_mul_pd	sse_mathfun.h	/^static inline v2df *mm_mul_pd( v2df *c, v2df *a, v2df *b )$/;"	f
mm_round_pd	sse_mathfun.h	/^static inline v2df *mm_round_pd( v2df *val, v2df *a )$/;"	f
mm_setr_clipped_pd	sse_mathfun.h	/^static inline v2df *mm_setr_clipped_pd( v2df *val, double val0, double val1, v2df *valMin,  v2df *valMax )$/;"	f
mm_sub_pd	sse_mathfun.h	/^static inline v2df *mm_sub_pd( v2df *c, v2df *a, v2df *b )$/;"	f
mod_angle	mxt.c	/^double mod_angle( phi)$/;"	f
mod_angle_	mxt.c	/^double mod_angle_( phi, base)$/;"	f
multiply_var	varsV.c	/^long multiply_var( var, operand, operands, count)$/;"	f
my_cmpeq_ps	sse_mathfun.h	/^inline __m128 my_cmpeq_ps(__m128 a, const __m128 b) {$/;"	f
my_cmpgt_ps	sse_mathfun.h	/^inline __m128 my_cmpgt_ps(__m128 a, const __m128 b) {$/;"	f
my_cmplt_ps	sse_mathfun.h	/^inline __m128 my_cmplt_ps(__m128 a, const __m128 b) {$/;"	f
my_movehl_ps	sse_mathfun.h	/^inline __m128 my_movehl_ps(__m128 a, const __m128 b) {$/;"	f
n	varsV.c	/^	long n;$/;"	m	struct:Var_list	file:
name	SymbolTable.h	/^	char *name;$/;"	m	struct:SymbolTable_List
name	vars-standalone.c	/^	char *name;				\/* pointer to a namestring	*\/$/;"	m	struct:exit_code	file:
name	varsedit.h	/^	char *name;$/;"	m	struct:ascanf_Function
name_length	vars-standalone.c	/^		name_length;$/;"	m	struct:exit_code	file:
name_length	varsedit.h	/^	int name_length;$/;"	m	struct:ascanf_Function
neg_count	mxt.h	/^	long pos_count, neg_count, last_count, takes;$/;"	m	struct:simpleanglestats
neg_sum	mxt.h	/^	double pos_weight_sum, neg_weight_sum, last_weight, pos_sum, neg_sum, sum_sqr, last_item;$/;"	m	struct:simpleanglestats
neg_weight_sum	mxt.h	/^	double pos_weight_sum, neg_weight_sum, last_weight, pos_sum, neg_sum, sum_sqr, last_item;$/;"	m	struct:simpleanglestats
new_RootPointer	vars-standalone.c	/^pointer new_RootPointer( int n, int itemsize)$/;"	f
new_RootPointer_Key	vars-standalone.c	/^pointer new_RootPointer_Key( RememberKey **rmkey, int n, int itemsize)$/;"	f
next	vars-standalone.c	/^	struct exit_code *next;		\/* next in chain (FILO)	*\/$/;"	m	struct:exit_code	typeref:struct:exit_code::exit_code	file:
next	vars-standalone.h	/^	struct cx_trace_stack_item *next;$/;"	m	struct:cx_trace_stack_item	typeref:struct:cx_trace_stack_item::cx_trace_stack_item
next	vars-standalone.h	/^	struct rememberlist *prev, *next;$/;"	m	struct:rememberlist	typeref:struct:rememberlist::
next_item	vars-standalone.c	/^#define next_item(/;"	d	file:
nice_incr	varsV.c	/^int nice_incr= 0;$/;"	v
no_recurse	varsV.c	/^static int VarChanges= 0, no_recurse= False;$/;"	v	file:
noise_add	mxt.c	/^double noise_add( p, pic, x, y)$/;"	f
normal_in	mxt.c	/^double normal_in( double min, double max)$/;"	f
normal_rand	mxt.c	/^double normal_rand( double av, double stdv )$/;"	f
objecttypes	vars-standalone.h	/^typedef enum objecttypes {$/;"	g
obtype	SymbolTable.h	/^	ObjectTypes obtype;$/;"	m	struct:SymbolTable
obtype	SymbolTable.h	/^	ObjectTypes obtype;$/;"	m	struct:SymbolTable_List
obtype	SymbolTable.h	/^	ObjectTypes obtype;$/;"	m	struct:syno
old_find_named_var	varsV.c	/^Variable_t *old_find_named_var( name, exact, vars, n, I, errfp)$/;"	f
onexit	vars-standalone.c	/^int onexit( int (*code)(), char *name, int condition, int verbose)$/;"	f
onexit	vars-standalone.h	/^#	define onexit	/;"	d
parbufferkey	varsedit.h	/^#define parbufferkey	/;"	d
parfile	varsedit.h	/^#define parfile	/;"	d
parfile_context	varsP.c	/^Parfile_Context parfile_context= {$/;"	v
parfile_context	varsedit.h	/^typedef struct parfile_context{$/;"	s
parfilecopy	varsedit.h	/^#define parfilecopy	/;"	d
parfiledummy	varsedit.h	/^#define parfiledummy	/;"	d
parfiledummy2	varsedit.h	/^#define parfiledummy2	/;"	d
parfilename	varsedit.h	/^#define parfilename	/;"	d
parlinelength	varsedit.h	/^#define parlinelength	/;"	d
parlinenumber	varsedit.h	/^#define parlinenumber	/;"	d
parlineposition	varsedit.h	/^#define parlineposition	/;"	d
parlinesread	varsedit.h	/^#define parlinesread	/;"	d
parlinesread_top	varsP.c	/^int parlinesread_top= 0;$/;"	v
parposition	varsedit.h	/^#define parposition	/;"	d
parse_operator	varsV.c	/^long parse_operator( var, Operator, p, count, errfp)$/;"	f
parse_operator_buffer	varsV.c	/^double *parse_operator_buffer= NULL;$/;"	v
parse_varline	varsV.c	/^long parse_varline( char *buffer, Variable_t *vars, long n, long *changes, int cook_it, FILE **outfp, FILE **errfp)$/;"	f
parse_varline_safe	varsV.c	/^long parse_varline_safe( char *buffer, Variable_t *vars, long n, long *changes, int cook_it, FILE **outfp, FILE **errfp)$/;"	f
parse_varline_with_list	varsV.c	/^static long parse_varline_with_list( char *buffer, long items, Var_list *arglist,$/;"	f	file:
parse_varlist_line	varsV.c	/^long parse_varlist_line( char *buffer, long *changes, int cook_it, FILE **outfp, FILE **errfp, long n, Variable_t *vars, ... )$/;"	f
pclose	win32.h	/^#define pclose(/;"	d
phival	mxt.c	/^double phival( x, y)$/;"	f
phival2	mxt.c	/^double phival2( x, y)$/;"	f
pmatch	regex.c	/^static char *pmatch( char *lp,  char *ap)$/;"	f	file:
pointer	cpu.h	/^typedef void* pointer;$/;"	t
pointer_method	Macros.h	/^typedef void* (*pointer_method)();$/;"	t
pop_trace_stack	vars-standalone.c	/^int pop_trace_stack(int n)$/;"	f
pop_trace_stackto	vars-standalone.c	/^int pop_trace_stackto(int n)$/;"	f
popen	win32.h	/^#define popen(/;"	d
posInf	NaN.h	/^#	define posInf	/;"	d
pos_count	mxt.h	/^	long pos_count, neg_count, last_count, takes;$/;"	m	struct:simpleanglestats
pos_sum	mxt.h	/^	double pos_weight_sum, neg_weight_sum, last_weight, pos_sum, neg_sum, sum_sqr, last_item;$/;"	m	struct:simpleanglestats
pos_weight_sum	mxt.h	/^	double pos_weight_sum, neg_weight_sum, last_weight, pos_sum, neg_sum, sum_sqr, last_item;$/;"	m	struct:simpleanglestats
power_var	varsV.c	/^long power_var( var, operand, operands, count)$/;"	f
prev	vars-standalone.h	/^	struct rememberlist *prev, *next;$/;"	m	struct:rememberlist	typeref:struct:rememberlist::rememberlist
print_RootPointer	vars-standalone.c	/^int print_RootPointer( FILE *fp, pointer p, int IsARootPointer )$/;"	f
print_charvar	varsV.c	/^RET_SHORT print_charvar( fp, var)$/;"	f
print_doublevar	varsV.c	/^RET_SHORT print_doublevar( fp, var)$/;"	f
print_floatvar	varsV.c	/^RET_SHORT print_floatvar( fp, var)$/;"	f
print_hexvar	varsV.c	/^RET_SHORT print_hexvar( fp, var)$/;"	f
print_intvar	varsV.c	/^RET_SHORT print_intvar( fp, var)$/;"	f
print_longvar	varsV.c	/^RET_SHORT print_longvar( fp, var)$/;"	f
print_parse_errors	varsV.c	/^int print_parse_errors= 0, print_timing= 0;$/;"	v
print_shortvar	varsV.c	/^RET_SHORT print_shortvar( fp, var)$/;"	f
print_timing	varsV.c	/^int print_parse_errors= 0, print_timing= 0;$/;"	v
print_trace_stack	vars-standalone.c	/^int print_trace_stack(FILE *fp, unsigned int n, char *msg)$/;"	f
print_var	varsV.c	/^RET_SHORT print_var( FILE *fp, Variable_t *var, int addr)$/;"	f
print_varMean	varsV.c	/^RET_SHORT print_varMean( fp, var)$/;"	f
ptr	varsedit.h	/^	void *ptr;$/;"	m	union:variableset
ptr	varsedit.h	/^	void *ptr;$/;"	m	union:variabletype
push_trace_stack	vars-standalone.c	/^int push_trace_stack( char *file, char *cctime, char *func, int line)$/;"	f
radians	Macros.h	/^#define radians(/;"	d
radians	varsA.c	/^#	define radians(/;"	d	file:
rand_choice	mxt.c	/^double rand_choice( double min, double max)$/;"	f
rand_in	mxt.c	/^double rand_in( min, max)$/;"	f
random_seed	mxt.c	/^unsigned short random_seed[3];$/;"	v
randomise	mxt.c	/^int randomise()				\/* randomise the random generators *\/$/;"	f
re_comp	regex.c	/^#undef re_comp$/;"	d	file:
re_comp	regex.c	/^char *re_comp(const char *pat)$/;"	f
re_exec	regex.c	/^#undef re_exec$/;"	d	file:
re_exec	regex.c	/^int re_exec( const char *lp)$/;"	f
re_exec_len	regex.c	/^char *re_exec_len( const char *lp)$/;"	f
re_exec_len	varsV.c	/^#define re_exec_len	/;"	d	file:
re_exec_len	varsV.c	/^#undef re_exec_len$/;"	d	file:
read_fraction	varsA.c	/^static int read_fraction(char *s, double *A, int *r, char *caller, int *n, pointer array)$/;"	f	file:
read_timeofday	lowlevel_timer.h	/^	static __inline__ lowlevel_clock_tick read_timeofday()$/;"	f
read_tsc	lowlevel_timer.h	/^	static __inline__ lowlevel_clock_tick read_tsc()$/;"	f
readline_error	varsV.c	/^int readline_error= False;$/;"	v
reg	Macros.h	/^#define reg /;"	d
register_A_fnc	varsA.c	/^register_A_fnc()$/;"	f
register_P_fnc	varsP.c	/^register_P_fnc()$/;"	f
register_S_fnc	varsS.c	/^register_S_fnc()$/;"	f
register_V_fnc	varsV.c	/^register_V_fnc()$/;"	f
rememberlist	vars-standalone.h	/^typedef struct rememberlist{$/;"	s
remove_leadspace_command	varsV.c	/^int remove_leadspace_command= False;$/;"	v
renew_RootPointer	vars-standalone.c	/^pointer renew_RootPointer( pointer *rp, int n, int itemsize,$/;"	f
reset_ascanf_index_value	varsA.c	/^int reset_ascanf_index_value= True, reset_ascanf_self_value= True;$/;"	v
reset_ascanf_self_value	varsA.c	/^int reset_ascanf_index_value= True, reset_ascanf_self_value= True;$/;"	v
resize	varsV.c	/^	int resize()$/;"	f
restart_the_program	varsV.c	/^int restart_the_program( v, N, i, C)$/;"	f
result	vars-standalone.c	/^		result,				\/* result from code call	*\/$/;"	m	struct:exit_code	file:
rindex	win32.h	/^#define	rindex(/;"	d
round	mxt.h	/^#define round(/;"	d
s	NaN.h	/^		uint32 s:1;$/;"	m	struct:IEEEfp::__anon4
s	NaN.h	/^		uint32 s:1;$/;"	m	struct:IEEEfp::__anon8
s	NaN.h	/^		uint32 s:1;$/;"	m	struct:IEEEsfp::__anon2
s	NaN.h	/^		uint32 s:1;$/;"	m	struct:IEEEsfp::__anon6
s	NaN.h	/^	} s;$/;"	m	union:IEEEfp	typeref:struct:IEEEfp::__anon4
s	NaN.h	/^	} s;$/;"	m	union:IEEEfp	typeref:struct:IEEEfp::__anon8
s	NaN.h	/^	} s;$/;"	m	union:IEEEsfp	typeref:struct:IEEEsfp::__anon2
s	NaN.h	/^	} s;$/;"	m	union:IEEEsfp	typeref:struct:IEEEsfp::__anon6
s	mxt.h	/^		unsigned s:1;$/;"	m	struct:IEEEfp::__anon12
s	mxt.h	/^		unsigned s:1;$/;"	m	struct:IEEEfp::__anon16
s	mxt.h	/^		unsigned s:1;$/;"	m	struct:IEEEsfp::__anon10
s	mxt.h	/^		unsigned s:1;$/;"	m	struct:IEEEsfp::__anon14
s	mxt.h	/^	} s;$/;"	m	union:IEEEfp	typeref:struct:IEEEfp::__anon12
s	mxt.h	/^	} s;$/;"	m	union:IEEEfp	typeref:struct:IEEEfp::__anon16
s	mxt.h	/^	} s;$/;"	m	union:IEEEsfp	typeref:struct:IEEEsfp::__anon10
s	mxt.h	/^	} s;$/;"	m	union:IEEEsfp	typeref:struct:IEEEsfp::__anon14
s	varsedit.h	/^	short *s, **sp;		\/* 16 bits	*\/$/;"	m	union:variabletype
s	varsedit.h	/^	short s, *sp;			\/* 16 bits	*\/$/;"	m	union:variableset
scalCumSum	sse_mathfun.h	/^static inline double scalCumSum( double *xa, int n )$/;"	f
scalCumSumSq	sse_mathfun.h	/^static inline double scalCumSumSq( double *xa, int n )$/;"	f
scalCumSumSumSq	sse_mathfun.h	/^static inline double scalCumSumSumSq( double *xa, int n, double *sumSQ )$/;"	f
sdateprint	vars-standalone.c	/^void sdateprint(char *str, char *str2)$/;"	f
serial	vars-standalone.h	/^	long serial;$/;"	m	struct:Remember
serial	vars-standalone.h	/^	long serial;$/;"	m	struct:rememberlist
serror	Macros.h	/^	char *serror()$/;"	f
set_INF	NaN.h	/^#define set_INF(/;"	d
set_INF	mxt.h	/^#define set_INF(/;"	d
set_Inf	NaN.h	/^#define set_Inf(/;"	d
set_Inf	mxt.h	/^#define set_Inf(/;"	d
set_NaN	NaN.h	/^#define set_NaN(/;"	d
set_NaN	mxt.h	/^#define set_NaN(/;"	d
set_alarm_call	vars-standalone.c	/^unsigned int set_alarm_call( unsigned int interval, int_method fun)$/;"	f
set_ascanf_memory	varsA.c	/^int set_ascanf_memory( double d)$/;"	f
set_fpINF	NaN.h	/^#define set_fpINF(/;"	d
set_fpINF	mxt.h	/^#define set_fpINF(/;"	d
set_fpInf	NaN.h	/^#define set_fpInf(/;"	d
set_fpInf	mxt.h	/^#define set_fpInf(/;"	d
set_fpNaN	NaN.h	/^#define set_fpNaN(/;"	d
set_fpNaN	mxt.h	/^#define set_fpNaN(/;"	d
set_sintab	mxt.c	/^int set_sintab()$/;"	f
set_var	varsV.c	/^long set_var( var, operand, operands, count)$/;"	f
set_var2	varsV.c	/^long set_var2( var, p, operand, operands, count, errfp)$/;"	f
set_vars_arglist	varsV.c	/^int set_vars_arglist( long n, Variable_t *vars, ... )$/;"	f
setenv	vars-standalone.c	/^#undef setenv$/;"	d	file:
setenv	vars-standalone.h	/^#define setenv(/;"	d
short_Variable	varsedit.h	/^typedef struct short_Variable{$/;"	s
short_Variable	varsedit.h	/^} short_Variable;$/;"	t	typeref:struct:short_Variable
short_method	Macros.h	/^typedef short (*short_method)();$/;"	t
shortp_Variable	varsedit.h	/^typedef struct shortp_Variable{$/;"	s
shortp_Variable	varsedit.h	/^} shortp_Variable;$/;"	t	typeref:struct:shortp_Variable
show_ascanf_functions	varsA.c	/^int show_ascanf_functions( FILE *fp, char *prefix)$/;"	f
show_watch_variables	varsV.c	/^int show_watch_variables( v, N, i, C)$/;"	f
sign	mxt.h	/^	#undef sign$/;"	d
sign	mxt.h	/^#define sign(/;"	d
simpleanglestats	mxt.h	/^typedef struct simpleanglestats{$/;"	s
simplestats	mxt.h	/^typedef struct simplestats{$/;"	s
sin_ps	sse_mathfun.h	/^static inline v4sf sin_ps(v4sf x)$/;"	f
sinc	varsedit.h	/^	} sinc;$/;"	m	struct:string	typeref:union:string::file_or_string
sincos_pd	sse_mathfun.h	/^static inline void sincos_pd(v2df x, v2df *s, v2df *c)$/;"	f
sincos_ps	sse_mathfun.h	/^static inline void sincos_ps(v4sf x, v4sf *s, v4sf *c)$/;"	f
sincosdeg	cxtrigo.h	/^#define sincosdeg(/;"	d
sindeg	mxt.h	/^#	define sindeg(/;"	d
sintab	mxt.c	/^static double *sintab;$/;"	v	file:
sintab_res	mxt.c	/^int sintab_set= 0, sintab_res= 360;		$/;"	v
sintab_set	mxt.c	/^int sintab_set= 0, sintab_res= 360;		$/;"	v
sinus	mxt.c	/^double sinus(x, l)$/;"	f
size	SymbolTable.h	/^	int size, flag;$/;"	m	struct:SymbolTable_List
size	SymbolTable.h	/^	int size;$/;"	m	struct:SymbolTable
size	SymbolTable.h	/^	int size;$/;"	m	struct:syno
size	vars-standalone.h	/^	unsigned long size;$/;"	m	struct:disposable
sizeofVariable	varsV.c	/^int sizeofVariable[MAX_VARTYPE]= { -1, sizeof(char), sizeof(unsigned char),$/;"	v
skew	mxt.h	/^	double min, max, mean, stdv, skew;$/;"	m	struct:simplestats
sleep	Macros.h	/^#	define sleep(/;"	d
small	sincos.c	/^#define	small	/;"	d	file:
sort_variables_list_alpha	varsV.c	/^int sort_variables_list_alpha( long n, Variable_t *vars, ... )$/;"	f
sp	varsedit.h	/^	short *s, **sp;		\/* 16 bits	*\/$/;"	m	union:variabletype
sp	varsedit.h	/^	short s, *sp;			\/* 16 bits	*\/$/;"	m	union:variableset
sprint_array	varsV.c	/^char *sprint_array( char *buf, int buflen, TypeOfVariable type, int len, pointer data)$/;"	f
sprint_var	varsV.c	/^RET_SHORT sprint_var( fp, var, addr, len)$/;"	f
sprint_varMean	varsV.c	/^RET_SHORT sprint_varMean( fp, var, len)$/;"	f
sta	regex.c	/^static int  sta = NOP;               	\/* status of lastpat *\/$/;"	v	file:
state	mxt.h	/^	double DeltaT, *state;$/;"	m	struct:leaky_int_par
stdv	mxt.h	/^	double min, max, mean, stdv, skew;$/;"	m	struct:simplestats
stdv	mxt.h	/^	double min, max, mean, stdv;$/;"	m	struct:simpleanglestats
stdv_zero_thres	varsV.c	/^double stdv_zero_thres= 0.0;$/;"	v
stimeprint	vars-standalone.c	/^void stimeprint(char *str, char *str2)$/;"	f
store	regex.c	/^#	define store(/;"	d	file:
strcaseeq	vars-standalone.h	/^#define strcaseeq(/;"	d
strccpy	vars-standalone.c	/^void strccpy(char *a, char *b, char *c)$/;"	f
streq	vars-standalone.h	/^#define streq(/;"	d
stricpy	vars-standalone.c	/^void stricpy( char *a, char *b)					\/* copy b in a if b< a *\/$/;"	f
string	varsedit.h	/^		char *string;$/;"	m	union:string::file_or_string
string	varsedit.h	/^typedef struct string{$/;"	s
strncaseeq	vars-standalone.h	/^#define strncaseeq(/;"	d
strneq	vars-standalone.h	/^#define strneq(/;"	d
subIndex	varsedit.h	/^	int Index, subIndex;$/;"	m	struct:variableselection
subtract_var	varsV.c	/^long subtract_var( var, operand, operands, count)$/;"	f
sum	mxt.h	/^	double weight_sum, last_weight, sum, sum_sqr, sum_cub, last_item;$/;"	m	struct:simplestats
sum_cub	mxt.h	/^	double weight_sum, last_weight, sum, sum_sqr, sum_cub, last_item;$/;"	m	struct:simplestats
sum_sqr	mxt.h	/^	double pos_weight_sum, neg_weight_sum, last_weight, pos_sum, neg_sum, sum_sqr, last_item;$/;"	m	struct:simpleanglestats
sum_sqr	mxt.h	/^	double weight_sum, last_weight, sum, sum_sqr, sum_cub, last_item;$/;"	m	struct:simplestats
swap_trace_stack	vars-standalone.c	/^int swap_trace_stack( char *file, char *cctime, char *func, int line)$/;"	f
symbol	SymbolTable.h	/^	char symbol[1];$/;"	m	struct:SymbolTable
symbol_len	SymbolTable.h	/^	int symbol_len;$/;"	m	struct:SymbolTable
symbol_len	SymbolTable.h	/^	int symbol_len;$/;"	m	struct:syno
syno	SymbolTable.h	/^typedef struct syno{$/;"	s
syno_adr	SymbolTable.h	/^	pointer syno_adr;		\/* the pointer that was already in the list (a copy of synonym->adr)	*\/$/;"	m	struct:syno
synonym	SymbolTable.h	/^	SymbolTable *synonym;		\/* a pointer to the entry containing the parent-synonym	*\/$/;"	m	struct:syno
sys_errno	vars-standalone.c	/^int sys_errno= 0;$/;"	v
tagstk	regex.c	/^static int  tagstk[MAXTAG];             \/* subpat tag stack..*\/$/;"	v	file:
tail	varsV.c	/^	struct Watch_Variable *tail;$/;"	m	struct:Watch_Variable	typeref:struct:Watch_Variable::Watch_Variable	file:
takes	mxt.h	/^	long pos_count, neg_count, last_count, takes;$/;"	m	struct:simpleanglestats
takes	mxt.h	/^	unsigned long count, last_count, takes;$/;"	m	struct:simplestats
tandeg	mxt.h	/^#	define tandeg(/;"	d
tau	mxt.h	/^	double *tau, *delta_t, memory;$/;"	m	struct:leaky_int_par
thresh	sincos.c	/^#define	thresh	/;"	d	file:
timer	varsV.c	/^	Time_Struct timer;$/;"	m	struct:vars_Time_Struct	file:
to_nextlevel	varsV.c	/^static int to_toplevel= False, to_nextlevel= False;$/;"	v	file:
to_toplevel	varsV.c	/^static int to_toplevel= False, to_nextlevel= False;$/;"	v	file:
trace_stack_item	vars-standalone.h	/^} trace_stack_item;$/;"	t	typeref:struct:cx_trace_stack_item
try_reverse_double	varsV.c	/^int try_reverse_double= 1;$/;"	v
twoPI	mxt.h	/^#define twoPI /;"	d
type	varsV.c	/^	TypeOfVariable type;$/;"	m	struct:Watch_Variable	file:
type	varsedit.h	/^	SincType type;$/;"	m	struct:string
type	varsedit.h	/^	ascanf_Function_type type;$/;"	m	struct:ascanf_Function
uc	varsedit.h	/^	unsigned char *uc;$/;"	m	union:variabletype
uc	varsedit.h	/^	unsigned char uc;$/;"	m	union:variableset
uchar_Variable	varsedit.h	/^typedef struct uchar_Variable{$/;"	s
uchar_Variable	varsedit.h	/^} uchar_Variable;$/;"	t	typeref:struct:uchar_Variable
ui	varsedit.h	/^	unsigned int *ui;$/;"	m	union:variabletype
ui	varsedit.h	/^	unsigned int ui;$/;"	m	union:variableset
uint16	64typedefs.h	/^	typedef unsigned short uint16;$/;"	t
uint32	64typedefs.h	/^	typedef unsigned int uint32;$/;"	t
uint32	64typedefs.h	/^	typedef unsigned long uint32;$/;"	t
uint64	64typedefs.h	/^	typedef unsigned long long uint64;$/;"	t
uint64	64typedefs.h	/^	typedef unsigned long uint64;$/;"	t
uint8	64typedefs.h	/^	typedef unsigned char uint8;$/;"	t
uint_Variable	varsedit.h	/^typedef struct uint_Variable{$/;"	s
uint_Variable	varsedit.h	/^} uint_Variable;$/;"	t	typeref:struct:uint_Variable
uint_method	Macros.h	/^typedef unsigned int (*uint_method)();$/;"	t
ul	varsedit.h	/^	unsigned long *ul;		\/* also HEX_VARS	*\/$/;"	m	union:variabletype
ul	varsedit.h	/^	unsigned long ul;$/;"	m	union:variableset
ulong_Variable	varsedit.h	/^typedef struct ulong_Variable{$/;"	s
ulong_Variable	varsedit.h	/^} ulong_Variable;$/;"	t	typeref:struct:ulong_Variable
ulong_method	Macros.h	/^typedef unsigned long (*ulong_method)();$/;"	t
uniform_rand	mxt.c	/^double uniform_rand( double av, double stdv )$/;"	f
unlikely	Macros.h	/^#	define unlikely(/;"	d
us	varsedit.h	/^	unsigned short *us;$/;"	m	union:variabletype
us	varsedit.h	/^	unsigned short us;$/;"	m	union:variableset
usage	varsedit.h	/^	char *usage;$/;"	m	struct:ascanf_Function
user	varsV.c	/^	int user;$/;"	m	struct:Var_list	file:
ushort_Variable	varsedit.h	/^typedef struct ushort_Variable{$/;"	s
ushort_Variable	varsedit.h	/^} ushort_Variable;$/;"	t	typeref:struct:ushort_Variable
ushort_method	Macros.h	/^typedef unsigned short (*ushort_method)();$/;"	t
v2df	sse_mathfun.h	/^typedef __m128d v2df; \/\/ vector of 2 double (sse2)$/;"	t
v2si	sse_mathfun.h	/^typedef __m64 v2si;   \/\/ vector of 2 int (mmx)$/;"	t
v4sf	sse_mathfun.h	/^typedef __m128 v4sf;  \/\/ vector of 4 float (sse1)$/;"	t
v4si	sse_mathfun.h	/^	typedef __m128i v4si; \/\/ vector of 4 int (sse2)$/;"	t
v4si	sse_mathfun.h	/^	typedef int	v4si __attribute__ ((__vector_size__ (16), __may_alias__));$/;"	t
value	SymbolTable.h	/^	struct _Variable *value;$/;"	m	struct:SymbolTable	typeref:struct:SymbolTable::_Variable
value	SymbolTable.h	/^	struct _Variable *value;$/;"	m	struct:syno	typeref:struct:syno::_Variable
var	varsV.c	/^	Variable_t *var;$/;"	m	struct:Watch_Variable	file:
var	varsedit.h	/^	Variable_t *var;$/;"	m	struct:DescribedVariable
var	varsedit.h	/^	Variable_t *var;$/;"	m	struct:DescribedVariable2
var_ChangedString	varsV.c	/^char *var_ChangedString( var)$/;"	f
var_Mean	varsV.c	/^Variable_t *var_Mean( var, mean, ss)$/;"	f
var_Value	varsV.c	/^double var_Value( var, Index)$/;"	f
var_accessed	varsV.c	/^int var_accessed( var, Index)$/;"	f
var_change_label	varsV.c	/^unsigned long var_change_label= 'VARS';$/;"	v
var_change_label_string	varsV.c	/^char var_change_label_string[]= "VARS";$/;"	v
var_changed_field	varsedit.h	/^typedef struct var_changed_field{$/;"	s
var_changed_flag	varsV.c	/^int var_changed_flag( var, Index)$/;"	f
var_label_change	varsV.c	/^int var_label_change= False;$/;"	v
var_set_Variable	varsV.c	/^int var_set_Variable( Variable_t *var, TypeOfVariable type, pointer val, unsigned int count, unsigned int maxcount)$/;"	f
var_syntax_ok	varsV.c	/^static int var_syntax_ok( name, buf, var)$/;"	f	file:
variableselection	varsedit.h	/^typedef struct variableselection{$/;"	s
variableset	varsedit.h	/^typedef union variableset{$/;"	u
variabletype	varsedit.h	/^typedef union variabletype{$/;"	u
vars	varsV.c	/^	Variable_t *vars;$/;"	m	struct:Var_list	file:
varsV_timer	varsV.c	/^vars_Time_Struct _varsV_timer, *varsV_timer= &_varsV_timer;$/;"	v
vars_Find_Symbol	varsV.c	/^char *vars_Find_Symbol( x)$/;"	f
vars_Time_Struct	varsV.c	/^typedef struct vars_Time_Struct{$/;"	s	file:
vars_Time_Struct	varsV.c	/^} vars_Time_Struct;$/;"	t	typeref:struct:vars_Time_Struct	file:
vars_address_symbol	varsV.c	/^char *vars_address_symbol( x)$/;"	f
vars_arg_items	varsV.c	/^static long vars_arg_items= 0;$/;"	v	file:
vars_arglist	varsV.c	/^static Var_list vars_arglist[MAX_VAR_LISTS];$/;"	v	file:
vars_ascanf_Functions	varsA.c	/^ascanf_Function vars_ascanf_Functions[]= {$/;"	v
vars_ch_parlinelength	varsV.c	/^static int vars_ch_parlinelength( v, n, id, C)$/;"	f	file:
vars_check_internals	varsV.c	/^int vars_check_internals= True;$/;"	v
vars_clear_change_labels	varsV.c	/^int vars_clear_change_labels( Variable_t *v, long n, unsigned long mask )$/;"	f
vars_compress_controlchars	varsV.c	/^int vars_compress_controlchars= 1, vars_print_as_string=1, list_level= 0;$/;"	v
vars_do_include_file	varsV.c	/^static int vars_do_include_file( Variable_t *v, long n, long id, long C)$/;"	f	file:
vars_echo	varsV.c	/^int vars_echo= 0;$/;"	v
vars_errfile	vars-standalone.h	/^#define vars_errfile	/;"	d
vars_errfile	varsA.c	/^	FILE *vars_errfile= NULL;$/;"	v
vars_errfile	varsA.c	/^	FILE *vars_errfile= stderr;$/;"	v
vars_fflush	varsV.c	/^static int vars_fflush( Variable_t *v, long N, long i, long C)$/;"	f	file:
vars_file	varsA.c	/^FILE *vars_file= NULL;$/;"	v
vars_file	varsA.c	/^FILE *vars_file= stdin;$/;"	v
vars_include_file	varsV.c	/^int vars_include_file( char *name )$/;"	f
vars_init_readline	varsV.c	/^int vars_init_readline()$/;"	f
vars_internals	varsV.c	/^static  Variable vars_internals[];$/;"	v	file:
vars_internals	varsV.c	/^static Variable vars_internals[]={$/;"	v	file:
vars_isatty	varsV.c	/^int vars_isatty( FILE *fp )$/;"	f
vars_label_changes	varsV.c	/^static int vars_label_changes( Variable_t *v, long N, long i, long C)$/;"	f	file:
vars_parse_line	varsV.c	/^long vars_parse_line( char *bufptr, long *changes )$/;"	f
vars_print_all_curly	varsV.c	/^	vars_print_all_curly= 0;$/;"	v
vars_print_as_string	varsV.c	/^int vars_compress_controlchars= 1, vars_print_as_string=1, list_level= 0;$/;"	v
vars_print_varvarcommands	varsV.c	/^int vars_print_varvarcommands= 1,$/;"	v
vars_sort_follow_tree	varsV.c	/^int vars_sort_follow_tree= 1;$/;"	v
vars_try_readline	varsV.c	/^int vars_try_readline= 0;$/;"	v
vars_try_readline	varsV.c	/^int vars_try_readline= True;$/;"	v
vars_update_change_label	varsV.c	/^unsigned long vars_update_change_label()$/;"	f
vars_update_change_label_string	varsV.c	/^char *vars_update_change_label_string( unsigned long change_label, char label_string[5] )$/;"	f
verbose	vars-standalone.c	/^	int verbose,				\/* notify if called?	*\/$/;"	m	struct:exit_code	file:
void_method	Macros.h	/^typedef void (*void_method)();$/;"	t
w_v_Pars	varsV.c	/^static Variable w_v_Pars[]={$/;"	v	file:
weight_sum	mxt.h	/^	double weight_sum, last_weight, sum, sum_sqr, sum_cub, last_item;$/;"	m	struct:simplestats
which_PIPE	varsV.c	/^static int which_PIPE, PIPE_nr, PIPE_depth;$/;"	v	file:
xascanf	varsA.c	/^int xascanf( n, s, a, ch)$/;"	f
xmm	sse_mathfun.h	/^  __m128 xmm;$/;"	m	union:xmm_mm_union
xmm_mm_union	sse_mathfun.h	/^typedef union xmm_mm_union {$/;"	u
xmm_mm_union	sse_mathfun.h	/^} xmm_mm_union;$/;"	t	typeref:union:xmm_mm_union
